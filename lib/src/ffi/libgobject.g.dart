// coverage:ignore-file
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: sort_constructors_first
// ignore_for_file: unused_element, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// GObject
class LibGObject {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibGObject(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibGObject.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void g_type_init() {
    return _g_type_init();
  }

  late final _g_type_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_type_init');
  late final _g_type_init = _g_type_initPtr.asFunction<void Function()>();

  void g_type_init_with_debug_flags(
    int debug_flags,
  ) {
    return _g_type_init_with_debug_flags(
      debug_flags,
    );
  }

  late final _g_type_init_with_debug_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'g_type_init_with_debug_flags');
  late final _g_type_init_with_debug_flags =
      _g_type_init_with_debug_flagsPtr.asFunction<void Function(int)>();

  ffi.Pointer<gchar> g_type_name(
    int type,
  ) {
    return _g_type_name(
      type,
    );
  }

  late final _g_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(GType)>>(
          'g_type_name');
  late final _g_type_name =
      _g_type_namePtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  int g_type_qname(
    int type,
  ) {
    return _g_type_qname(
      type,
    );
  }

  late final _g_type_qnamePtr =
      _lookup<ffi.NativeFunction<GQuark Function(GType)>>('g_type_qname');
  late final _g_type_qname = _g_type_qnamePtr.asFunction<int Function(int)>();

  int g_type_from_name(
    ffi.Pointer<gchar> name,
  ) {
    return _g_type_from_name(
      name,
    );
  }

  late final _g_type_from_namePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<gchar>)>>(
          'g_type_from_name');
  late final _g_type_from_name =
      _g_type_from_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_type_parent(
    int type,
  ) {
    return _g_type_parent(
      type,
    );
  }

  late final _g_type_parentPtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>('g_type_parent');
  late final _g_type_parent = _g_type_parentPtr.asFunction<int Function(int)>();

  int g_type_depth(
    int type,
  ) {
    return _g_type_depth(
      type,
    );
  }

  late final _g_type_depthPtr =
      _lookup<ffi.NativeFunction<guint Function(GType)>>('g_type_depth');
  late final _g_type_depth = _g_type_depthPtr.asFunction<int Function(int)>();

  int g_type_next_base(
    int leaf_type,
    int root_type,
  ) {
    return _g_type_next_base(
      leaf_type,
      root_type,
    );
  }

  late final _g_type_next_basePtr =
      _lookup<ffi.NativeFunction<GType Function(GType, GType)>>(
          'g_type_next_base');
  late final _g_type_next_base =
      _g_type_next_basePtr.asFunction<int Function(int, int)>();

  int g_type_is_a(
    int type,
    int is_a_type,
  ) {
    return _g_type_is_a(
      type,
      is_a_type,
    );
  }

  late final _g_type_is_aPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_type_is_a');
  late final _g_type_is_a =
      _g_type_is_aPtr.asFunction<int Function(int, int)>();

  gpointer g_type_class_ref(
    int type,
  ) {
    return _g_type_class_ref(
      type,
    );
  }

  late final _g_type_class_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>('g_type_class_ref');
  late final _g_type_class_ref =
      _g_type_class_refPtr.asFunction<gpointer Function(int)>();

  gpointer g_type_class_peek(
    int type,
  ) {
    return _g_type_class_peek(
      type,
    );
  }

  late final _g_type_class_peekPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_class_peek');
  late final _g_type_class_peek =
      _g_type_class_peekPtr.asFunction<gpointer Function(int)>();

  gpointer g_type_class_peek_static(
    int type,
  ) {
    return _g_type_class_peek_static(
      type,
    );
  }

  late final _g_type_class_peek_staticPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_class_peek_static');
  late final _g_type_class_peek_static =
      _g_type_class_peek_staticPtr.asFunction<gpointer Function(int)>();

  void g_type_class_unref(
    gpointer g_class,
  ) {
    return _g_type_class_unref(
      g_class,
    );
  }

  late final _g_type_class_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_type_class_unref');
  late final _g_type_class_unref =
      _g_type_class_unrefPtr.asFunction<void Function(gpointer)>();

  gpointer g_type_class_peek_parent(
    gpointer g_class,
  ) {
    return _g_type_class_peek_parent(
      g_class,
    );
  }

  late final _g_type_class_peek_parentPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_type_class_peek_parent');
  late final _g_type_class_peek_parent =
      _g_type_class_peek_parentPtr.asFunction<gpointer Function(gpointer)>();

  gpointer g_type_interface_peek(
    gpointer instance_class,
    int iface_type,
  ) {
    return _g_type_interface_peek(
      instance_class,
      iface_type,
    );
  }

  late final _g_type_interface_peekPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer, GType)>>(
          'g_type_interface_peek');
  late final _g_type_interface_peek =
      _g_type_interface_peekPtr.asFunction<gpointer Function(gpointer, int)>();

  gpointer g_type_interface_peek_parent(
    gpointer g_iface,
  ) {
    return _g_type_interface_peek_parent(
      g_iface,
    );
  }

  late final _g_type_interface_peek_parentPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_type_interface_peek_parent');
  late final _g_type_interface_peek_parent = _g_type_interface_peek_parentPtr
      .asFunction<gpointer Function(gpointer)>();

  gpointer g_type_default_interface_ref(
    int g_type,
  ) {
    return _g_type_default_interface_ref(
      g_type,
    );
  }

  late final _g_type_default_interface_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_default_interface_ref');
  late final _g_type_default_interface_ref =
      _g_type_default_interface_refPtr.asFunction<gpointer Function(int)>();

  gpointer g_type_default_interface_peek(
    int g_type,
  ) {
    return _g_type_default_interface_peek(
      g_type,
    );
  }

  late final _g_type_default_interface_peekPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_default_interface_peek');
  late final _g_type_default_interface_peek =
      _g_type_default_interface_peekPtr.asFunction<gpointer Function(int)>();

  void g_type_default_interface_unref(
    gpointer g_iface,
  ) {
    return _g_type_default_interface_unref(
      g_iface,
    );
  }

  late final _g_type_default_interface_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_type_default_interface_unref');
  late final _g_type_default_interface_unref =
      _g_type_default_interface_unrefPtr.asFunction<void Function(gpointer)>();

  ffi.Pointer<GType> g_type_children(
    int type,
    ffi.Pointer<guint> n_children,
  ) {
    return _g_type_children(
      type,
      n_children,
    );
  }

  late final _g_type_childrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_children');
  late final _g_type_children = _g_type_childrenPtr
      .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  ffi.Pointer<GType> g_type_interfaces(
    int type,
    ffi.Pointer<guint> n_interfaces,
  ) {
    return _g_type_interfaces(
      type,
      n_interfaces,
    );
  }

  late final _g_type_interfacesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_interfaces');
  late final _g_type_interfaces = _g_type_interfacesPtr
      .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  void g_type_set_qdata(
    int type,
    int quark,
    gpointer data,
  ) {
    return _g_type_set_qdata(
      type,
      quark,
      data,
    );
  }

  late final _g_type_set_qdataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, GQuark, gpointer)>>(
          'g_type_set_qdata');
  late final _g_type_set_qdata =
      _g_type_set_qdataPtr.asFunction<void Function(int, int, gpointer)>();

  gpointer g_type_get_qdata(
    int type,
    int quark,
  ) {
    return _g_type_get_qdata(
      type,
      quark,
    );
  }

  late final _g_type_get_qdataPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType, GQuark)>>(
          'g_type_get_qdata');
  late final _g_type_get_qdata =
      _g_type_get_qdataPtr.asFunction<gpointer Function(int, int)>();

  void g_type_query(
    int type,
    ffi.Pointer<GTypeQuery> query,
  ) {
    return _g_type_query(
      type,
      query,
    );
  }

  late final _g_type_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeQuery>)>>('g_type_query');
  late final _g_type_query = _g_type_queryPtr
      .asFunction<void Function(int, ffi.Pointer<GTypeQuery>)>();

  int g_type_get_instance_count(
    int type,
  ) {
    return _g_type_get_instance_count(
      type,
    );
  }

  late final _g_type_get_instance_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(GType)>>(
          'g_type_get_instance_count');
  late final _g_type_get_instance_count =
      _g_type_get_instance_countPtr.asFunction<int Function(int)>();

  int g_type_register_static(
    int parent_type,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypeInfo> info,
    int flags,
  ) {
    return _g_type_register_static(
      parent_type,
      type_name,
      info,
      flags,
    );
  }

  late final _g_type_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(GType, ffi.Pointer<gchar>, ffi.Pointer<GTypeInfo>,
              ffi.Int32)>>('g_type_register_static');
  late final _g_type_register_static = _g_type_register_staticPtr.asFunction<
      int Function(int, ffi.Pointer<gchar>, ffi.Pointer<GTypeInfo>, int)>();

  int g_type_register_static_simple(
    int parent_type,
    ffi.Pointer<gchar> type_name,
    int class_size,
    GClassInitFunc class_init,
    int instance_size,
    GInstanceInitFunc instance_init,
    int flags,
  ) {
    return _g_type_register_static_simple(
      parent_type,
      type_name,
      class_size,
      class_init,
      instance_size,
      instance_init,
      flags,
    );
  }

  late final _g_type_register_static_simplePtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              GType,
              ffi.Pointer<gchar>,
              guint,
              GClassInitFunc,
              guint,
              GInstanceInitFunc,
              ffi.Int32)>>('g_type_register_static_simple');
  late final _g_type_register_static_simple =
      _g_type_register_static_simplePtr.asFunction<
          int Function(int, ffi.Pointer<gchar>, int, GClassInitFunc, int,
              GInstanceInitFunc, int)>();

  int g_type_register_dynamic(
    int parent_type,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypePlugin> plugin,
    int flags,
  ) {
    return _g_type_register_dynamic(
      parent_type,
      type_name,
      plugin,
      flags,
    );
  }

  late final _g_type_register_dynamicPtr = _lookup<
      ffi.NativeFunction<
          GType Function(GType, ffi.Pointer<gchar>, ffi.Pointer<GTypePlugin>,
              ffi.Int32)>>('g_type_register_dynamic');
  late final _g_type_register_dynamic = _g_type_register_dynamicPtr.asFunction<
      int Function(int, ffi.Pointer<gchar>, ffi.Pointer<GTypePlugin>, int)>();

  int g_type_register_fundamental(
    int type_id,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeFundamentalInfo> finfo,
    int flags,
  ) {
    return _g_type_register_fundamental(
      type_id,
      type_name,
      info,
      finfo,
      flags,
    );
  }

  late final _g_type_register_fundamentalPtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              GType,
              ffi.Pointer<gchar>,
              ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeFundamentalInfo>,
              ffi.Int32)>>('g_type_register_fundamental');
  late final _g_type_register_fundamental =
      _g_type_register_fundamentalPtr.asFunction<
          int Function(int, ffi.Pointer<gchar>, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeFundamentalInfo>, int)>();

  void g_type_add_interface_static(
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> info,
  ) {
    return _g_type_add_interface_static(
      instance_type,
      interface_type,
      info,
    );
  }

  late final _g_type_add_interface_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, GType,
              ffi.Pointer<GInterfaceInfo>)>>('g_type_add_interface_static');
  late final _g_type_add_interface_static = _g_type_add_interface_staticPtr
      .asFunction<void Function(int, int, ffi.Pointer<GInterfaceInfo>)>();

  void g_type_add_interface_dynamic(
    int instance_type,
    int interface_type,
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_add_interface_dynamic(
      instance_type,
      interface_type,
      plugin,
    );
  }

  late final _g_type_add_interface_dynamicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, GType,
              ffi.Pointer<GTypePlugin>)>>('g_type_add_interface_dynamic');
  late final _g_type_add_interface_dynamic = _g_type_add_interface_dynamicPtr
      .asFunction<void Function(int, int, ffi.Pointer<GTypePlugin>)>();

  void g_type_interface_add_prerequisite(
    int interface_type,
    int prerequisite_type,
  ) {
    return _g_type_interface_add_prerequisite(
      interface_type,
      prerequisite_type,
    );
  }

  late final _g_type_interface_add_prerequisitePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, GType)>>(
          'g_type_interface_add_prerequisite');
  late final _g_type_interface_add_prerequisite =
      _g_type_interface_add_prerequisitePtr
          .asFunction<void Function(int, int)>();

  ffi.Pointer<GType> g_type_interface_prerequisites(
    int interface_type,
    ffi.Pointer<guint> n_prerequisites,
  ) {
    return _g_type_interface_prerequisites(
      interface_type,
      n_prerequisites,
    );
  }

  late final _g_type_interface_prerequisitesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_interface_prerequisites');
  late final _g_type_interface_prerequisites =
      _g_type_interface_prerequisitesPtr
          .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  int g_type_interface_instantiatable_prerequisite(
    int interface_type,
  ) {
    return _g_type_interface_instantiatable_prerequisite(
      interface_type,
    );
  }

  late final _g_type_interface_instantiatable_prerequisitePtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>(
          'g_type_interface_instantiatable_prerequisite');
  late final _g_type_interface_instantiatable_prerequisite =
      _g_type_interface_instantiatable_prerequisitePtr
          .asFunction<int Function(int)>();

  void g_type_class_add_private(
    gpointer g_class,
    int private_size,
  ) {
    return _g_type_class_add_private(
      g_class,
      private_size,
    );
  }

  late final _g_type_class_add_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gsize)>>(
          'g_type_class_add_private');
  late final _g_type_class_add_private =
      _g_type_class_add_privatePtr.asFunction<void Function(gpointer, int)>();

  int g_type_add_instance_private(
    int class_type,
    int private_size,
  ) {
    return _g_type_add_instance_private(
      class_type,
      private_size,
    );
  }

  late final _g_type_add_instance_privatePtr =
      _lookup<ffi.NativeFunction<gint Function(GType, gsize)>>(
          'g_type_add_instance_private');
  late final _g_type_add_instance_private =
      _g_type_add_instance_privatePtr.asFunction<int Function(int, int)>();

  gpointer g_type_instance_get_private(
    ffi.Pointer<GTypeInstance> instance,
    int private_type,
  ) {
    return _g_type_instance_get_private(
      instance,
      private_type,
    );
  }

  late final _g_type_instance_get_privatePtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_instance_get_private');
  late final _g_type_instance_get_private = _g_type_instance_get_privatePtr
      .asFunction<gpointer Function(ffi.Pointer<GTypeInstance>, int)>();

  void g_type_class_adjust_private_offset(
    gpointer g_class,
    ffi.Pointer<gint> private_size_or_offset,
  ) {
    return _g_type_class_adjust_private_offset(
      g_class,
      private_size_or_offset,
    );
  }

  late final _g_type_class_adjust_private_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gint>)>>(
      'g_type_class_adjust_private_offset');
  late final _g_type_class_adjust_private_offset =
      _g_type_class_adjust_private_offsetPtr
          .asFunction<void Function(gpointer, ffi.Pointer<gint>)>();

  void g_type_add_class_private(
    int class_type,
    int private_size,
  ) {
    return _g_type_add_class_private(
      class_type,
      private_size,
    );
  }

  late final _g_type_add_class_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, gsize)>>(
          'g_type_add_class_private');
  late final _g_type_add_class_private =
      _g_type_add_class_privatePtr.asFunction<void Function(int, int)>();

  gpointer g_type_class_get_private(
    ffi.Pointer<GTypeClass> klass,
    int private_type,
  ) {
    return _g_type_class_get_private(
      klass,
      private_type,
    );
  }

  late final _g_type_class_get_privatePtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GTypeClass>, GType)>>('g_type_class_get_private');
  late final _g_type_class_get_private = _g_type_class_get_privatePtr
      .asFunction<gpointer Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_class_get_instance_private_offset(
    gpointer g_class,
  ) {
    return _g_type_class_get_instance_private_offset(
      g_class,
    );
  }

  late final _g_type_class_get_instance_private_offsetPtr =
      _lookup<ffi.NativeFunction<gint Function(gpointer)>>(
          'g_type_class_get_instance_private_offset');
  late final _g_type_class_get_instance_private_offset =
      _g_type_class_get_instance_private_offsetPtr
          .asFunction<int Function(gpointer)>();

  void g_type_ensure(
    int type,
  ) {
    return _g_type_ensure(
      type,
    );
  }

  late final _g_type_ensurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType)>>('g_type_ensure');
  late final _g_type_ensure =
      _g_type_ensurePtr.asFunction<void Function(int)>();

  int g_type_get_type_registration_serial() {
    return _g_type_get_type_registration_serial();
  }

  late final _g_type_get_type_registration_serialPtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'g_type_get_type_registration_serial');
  late final _g_type_get_type_registration_serial =
      _g_type_get_type_registration_serialPtr.asFunction<int Function()>();

  ffi.Pointer<GTypePlugin> g_type_get_plugin(
    int type,
  ) {
    return _g_type_get_plugin(
      type,
    );
  }

  late final _g_type_get_pluginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypePlugin> Function(GType)>>(
          'g_type_get_plugin');
  late final _g_type_get_plugin = _g_type_get_pluginPtr
      .asFunction<ffi.Pointer<GTypePlugin> Function(int)>();

  ffi.Pointer<GTypePlugin> g_type_interface_get_plugin(
    int instance_type,
    int interface_type,
  ) {
    return _g_type_interface_get_plugin(
      instance_type,
      interface_type,
    );
  }

  late final _g_type_interface_get_pluginPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GTypePlugin> Function(GType, GType)>>(
      'g_type_interface_get_plugin');
  late final _g_type_interface_get_plugin = _g_type_interface_get_pluginPtr
      .asFunction<ffi.Pointer<GTypePlugin> Function(int, int)>();

  int g_type_fundamental_next() {
    return _g_type_fundamental_next();
  }

  late final _g_type_fundamental_nextPtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_fundamental_next');
  late final _g_type_fundamental_next =
      _g_type_fundamental_nextPtr.asFunction<int Function()>();

  int g_type_fundamental(
    int type_id,
  ) {
    return _g_type_fundamental(
      type_id,
    );
  }

  late final _g_type_fundamentalPtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>('g_type_fundamental');
  late final _g_type_fundamental =
      _g_type_fundamentalPtr.asFunction<int Function(int)>();

  ffi.Pointer<GTypeInstance> g_type_create_instance(
    int type,
  ) {
    return _g_type_create_instance(
      type,
    );
  }

  late final _g_type_create_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypeInstance> Function(GType)>>(
          'g_type_create_instance');
  late final _g_type_create_instance = _g_type_create_instancePtr
      .asFunction<ffi.Pointer<GTypeInstance> Function(int)>();

  void g_type_free_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_free_instance(
      instance,
    );
  }

  late final _g_type_free_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypeInstance>)>>(
      'g_type_free_instance');
  late final _g_type_free_instance = _g_type_free_instancePtr
      .asFunction<void Function(ffi.Pointer<GTypeInstance>)>();

  void g_type_add_class_cache_func(
    gpointer cache_data,
    GTypeClassCacheFunc cache_func,
  ) {
    return _g_type_add_class_cache_func(
      cache_data,
      cache_func,
    );
  }

  late final _g_type_add_class_cache_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, GTypeClassCacheFunc)>>(
      'g_type_add_class_cache_func');
  late final _g_type_add_class_cache_func = _g_type_add_class_cache_funcPtr
      .asFunction<void Function(gpointer, GTypeClassCacheFunc)>();

  void g_type_remove_class_cache_func(
    gpointer cache_data,
    GTypeClassCacheFunc cache_func,
  ) {
    return _g_type_remove_class_cache_func(
      cache_data,
      cache_func,
    );
  }

  late final _g_type_remove_class_cache_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, GTypeClassCacheFunc)>>(
      'g_type_remove_class_cache_func');
  late final _g_type_remove_class_cache_func =
      _g_type_remove_class_cache_funcPtr
          .asFunction<void Function(gpointer, GTypeClassCacheFunc)>();

  void g_type_class_unref_uncached(
    gpointer g_class,
  ) {
    return _g_type_class_unref_uncached(
      g_class,
    );
  }

  late final _g_type_class_unref_uncachedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_type_class_unref_uncached');
  late final _g_type_class_unref_uncached =
      _g_type_class_unref_uncachedPtr.asFunction<void Function(gpointer)>();

  void g_type_add_interface_check(
    gpointer check_data,
    GTypeInterfaceCheckFunc check_func,
  ) {
    return _g_type_add_interface_check(
      check_data,
      check_func,
    );
  }

  late final _g_type_add_interface_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer,
              GTypeInterfaceCheckFunc)>>('g_type_add_interface_check');
  late final _g_type_add_interface_check = _g_type_add_interface_checkPtr
      .asFunction<void Function(gpointer, GTypeInterfaceCheckFunc)>();

  void g_type_remove_interface_check(
    gpointer check_data,
    GTypeInterfaceCheckFunc check_func,
  ) {
    return _g_type_remove_interface_check(
      check_data,
      check_func,
    );
  }

  late final _g_type_remove_interface_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer,
              GTypeInterfaceCheckFunc)>>('g_type_remove_interface_check');
  late final _g_type_remove_interface_check = _g_type_remove_interface_checkPtr
      .asFunction<void Function(gpointer, GTypeInterfaceCheckFunc)>();

  ffi.Pointer<GTypeValueTable> g_type_value_table_peek(
    int type,
  ) {
    return _g_type_value_table_peek(
      type,
    );
  }

  late final _g_type_value_table_peekPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypeValueTable> Function(GType)>>(
          'g_type_value_table_peek');
  late final _g_type_value_table_peek = _g_type_value_table_peekPtr
      .asFunction<ffi.Pointer<GTypeValueTable> Function(int)>();

  int g_type_check_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_check_instance(
      instance,
    );
  }

  late final _g_type_check_instancePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTypeInstance>)>>(
      'g_type_check_instance');
  late final _g_type_check_instance = _g_type_check_instancePtr
      .asFunction<int Function(ffi.Pointer<GTypeInstance>)>();

  ffi.Pointer<GTypeInstance> g_type_check_instance_cast(
    ffi.Pointer<GTypeInstance> instance,
    int iface_type,
  ) {
    return _g_type_check_instance_cast(
      instance,
      iface_type,
    );
  }

  late final _g_type_check_instance_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTypeInstance> Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_cast');
  late final _g_type_check_instance_cast =
      _g_type_check_instance_castPtr.asFunction<
          ffi.Pointer<GTypeInstance> Function(
              ffi.Pointer<GTypeInstance>, int)>();

  int g_type_check_instance_is_a(
    ffi.Pointer<GTypeInstance> instance,
    int iface_type,
  ) {
    return _g_type_check_instance_is_a(
      instance,
      iface_type,
    );
  }

  late final _g_type_check_instance_is_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_is_a');
  late final _g_type_check_instance_is_a = _g_type_check_instance_is_aPtr
      .asFunction<int Function(ffi.Pointer<GTypeInstance>, int)>();

  int g_type_check_instance_is_fundamentally_a(
    ffi.Pointer<GTypeInstance> instance,
    int fundamental_type,
  ) {
    return _g_type_check_instance_is_fundamentally_a(
      instance,
      fundamental_type,
    );
  }

  late final _g_type_check_instance_is_fundamentally_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_is_fundamentally_a');
  late final _g_type_check_instance_is_fundamentally_a =
      _g_type_check_instance_is_fundamentally_aPtr
          .asFunction<int Function(ffi.Pointer<GTypeInstance>, int)>();

  ffi.Pointer<GTypeClass> g_type_check_class_cast(
    ffi.Pointer<GTypeClass> g_class,
    int is_a_type,
  ) {
    return _g_type_check_class_cast(
      g_class,
      is_a_type,
    );
  }

  late final _g_type_check_class_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTypeClass> Function(
              ffi.Pointer<GTypeClass>, GType)>>('g_type_check_class_cast');
  late final _g_type_check_class_cast = _g_type_check_class_castPtr.asFunction<
      ffi.Pointer<GTypeClass> Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_check_class_is_a(
    ffi.Pointer<GTypeClass> g_class,
    int is_a_type,
  ) {
    return _g_type_check_class_is_a(
      g_class,
      is_a_type,
    );
  }

  late final _g_type_check_class_is_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTypeClass>, GType)>>('g_type_check_class_is_a');
  late final _g_type_check_class_is_a = _g_type_check_class_is_aPtr
      .asFunction<int Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_check_is_value_type(
    int type,
  ) {
    return _g_type_check_is_value_type(
      type,
    );
  }

  late final _g_type_check_is_value_typePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType)>>(
          'g_type_check_is_value_type');
  late final _g_type_check_is_value_type =
      _g_type_check_is_value_typePtr.asFunction<int Function(int)>();

  int g_type_check_value(
    ffi.Pointer<GValue> value,
  ) {
    return _g_type_check_value(
      value,
    );
  }

  late final _g_type_check_valuePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_type_check_value');
  late final _g_type_check_value =
      _g_type_check_valuePtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  int g_type_check_value_holds(
    ffi.Pointer<GValue> value,
    int type,
  ) {
    return _g_type_check_value_holds(
      value,
      type,
    );
  }

  late final _g_type_check_value_holdsPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>, GType)>>(
      'g_type_check_value_holds');
  late final _g_type_check_value_holds = _g_type_check_value_holdsPtr
      .asFunction<int Function(ffi.Pointer<GValue>, int)>();

  int g_type_test_flags(
    int type,
    int flags,
  ) {
    return _g_type_test_flags(
      type,
      flags,
    );
  }

  late final _g_type_test_flagsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, guint)>>(
          'g_type_test_flags');
  late final _g_type_test_flags =
      _g_type_test_flagsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<gchar> g_type_name_from_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_name_from_instance(
      instance,
    );
  }

  late final _g_type_name_from_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTypeInstance>)>>('g_type_name_from_instance');
  late final _g_type_name_from_instance = _g_type_name_from_instancePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTypeInstance>)>();

  ffi.Pointer<gchar> g_type_name_from_class(
    ffi.Pointer<GTypeClass> g_class,
  ) {
    return _g_type_name_from_class(
      g_class,
    );
  }

  late final _g_type_name_from_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTypeClass>)>>('g_type_name_from_class');
  late final _g_type_name_from_class = _g_type_name_from_classPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTypeClass>)>();

  ffi.Pointer<GValue> g_value_init(
    ffi.Pointer<GValue> value,
    int g_type,
  ) {
    return _g_value_init(
      value,
      g_type,
    );
  }

  late final _g_value_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValue>, GType)>>('g_value_init');
  late final _g_value_init = _g_value_initPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>, int)>();

  void g_value_copy(
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
  ) {
    return _g_value_copy(
      src_value,
      dest_value,
    );
  }

  late final _g_value_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('g_value_copy');
  late final _g_value_copy = _g_value_copyPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValue> g_value_reset(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_reset(
      value,
    );
  }

  late final _g_value_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>>('g_value_reset');
  late final _g_value_reset = _g_value_resetPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>();

  void g_value_unset(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_unset(
      value,
    );
  }

  late final _g_value_unsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>)>>(
          'g_value_unset');
  late final _g_value_unset =
      _g_value_unsetPtr.asFunction<void Function(ffi.Pointer<GValue>)>();

  void g_value_set_instance(
    ffi.Pointer<GValue> value,
    gpointer instance,
  ) {
    return _g_value_set_instance(
      value,
      instance,
    );
  }

  late final _g_value_set_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_instance');
  late final _g_value_set_instance = _g_value_set_instancePtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  void g_value_init_from_instance(
    ffi.Pointer<GValue> value,
    gpointer instance,
  ) {
    return _g_value_init_from_instance(
      value,
      instance,
    );
  }

  late final _g_value_init_from_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_init_from_instance');
  late final _g_value_init_from_instance = _g_value_init_from_instancePtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  int g_value_fits_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_fits_pointer(
      value,
    );
  }

  late final _g_value_fits_pointerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_value_fits_pointer');
  late final _g_value_fits_pointer =
      _g_value_fits_pointerPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  gpointer g_value_peek_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_peek_pointer(
      value,
    );
  }

  late final _g_value_peek_pointerPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_peek_pointer');
  late final _g_value_peek_pointer = _g_value_peek_pointerPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_value_type_compatible(
    int src_type,
    int dest_type,
  ) {
    return _g_value_type_compatible(
      src_type,
      dest_type,
    );
  }

  late final _g_value_type_compatiblePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_value_type_compatible');
  late final _g_value_type_compatible =
      _g_value_type_compatiblePtr.asFunction<int Function(int, int)>();

  int g_value_type_transformable(
    int src_type,
    int dest_type,
  ) {
    return _g_value_type_transformable(
      src_type,
      dest_type,
    );
  }

  late final _g_value_type_transformablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_value_type_transformable');
  late final _g_value_type_transformable =
      _g_value_type_transformablePtr.asFunction<int Function(int, int)>();

  int g_value_transform(
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
  ) {
    return _g_value_transform(
      src_value,
      dest_value,
    );
  }

  late final _g_value_transformPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('g_value_transform');
  late final _g_value_transform = _g_value_transformPtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void g_value_register_transform_func(
    int src_type,
    int dest_type,
    GValueTransform transform_func,
  ) {
    return _g_value_register_transform_func(
      src_type,
      dest_type,
      transform_func,
    );
  }

  late final _g_value_register_transform_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GType, GType, GValueTransform)>>(
      'g_value_register_transform_func');
  late final _g_value_register_transform_func =
      _g_value_register_transform_funcPtr
          .asFunction<void Function(int, int, GValueTransform)>();

  ffi.Pointer<GParamSpec> g_param_spec_ref(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_ref(
      pspec,
    );
  }

  late final _g_param_spec_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_ref');
  late final _g_param_spec_ref = _g_param_spec_refPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  void g_param_spec_unref(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_unref(
      pspec,
    );
  }

  late final _g_param_spec_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_unref');
  late final _g_param_spec_unref = _g_param_spec_unrefPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>)>();

  void g_param_spec_sink(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_sink(
      pspec,
    );
  }

  late final _g_param_spec_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_sink');
  late final _g_param_spec_sink = _g_param_spec_sinkPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_ref_sink(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_ref_sink(
      pspec,
    );
  }

  late final _g_param_spec_ref_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_ref_sink');
  late final _g_param_spec_ref_sink = _g_param_spec_ref_sinkPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  gpointer g_param_spec_get_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
  ) {
    return _g_param_spec_get_qdata(
      pspec,
      quark,
    );
  }

  late final _g_param_spec_get_qdataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GParamSpec>, GQuark)>>('g_param_spec_get_qdata');
  late final _g_param_spec_get_qdata = _g_param_spec_get_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GParamSpec>, int)>();

  void g_param_spec_set_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
    gpointer data,
  ) {
    return _g_param_spec_set_qdata(
      pspec,
      quark,
      data,
    );
  }

  late final _g_param_spec_set_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>, GQuark,
              gpointer)>>('g_param_spec_set_qdata');
  late final _g_param_spec_set_qdata = _g_param_spec_set_qdataPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>, int, gpointer)>();

  void g_param_spec_set_qdata_full(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
    gpointer data,
    GDestroyNotify destroy,
  ) {
    return _g_param_spec_set_qdata_full(
      pspec,
      quark,
      data,
      destroy,
    );
  }

  late final _g_param_spec_set_qdata_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>, GQuark, gpointer,
              GDestroyNotify)>>('g_param_spec_set_qdata_full');
  late final _g_param_spec_set_qdata_full =
      _g_param_spec_set_qdata_fullPtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpec>, int, gpointer, GDestroyNotify)>();

  gpointer g_param_spec_steal_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
  ) {
    return _g_param_spec_steal_qdata(
      pspec,
      quark,
    );
  }

  late final _g_param_spec_steal_qdataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GParamSpec>, GQuark)>>('g_param_spec_steal_qdata');
  late final _g_param_spec_steal_qdata = _g_param_spec_steal_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GParamSpec>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_get_redirect_target(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_redirect_target(
      pspec,
    );
  }

  late final _g_param_spec_get_redirect_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_redirect_target');
  late final _g_param_spec_get_redirect_target =
      _g_param_spec_get_redirect_targetPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  void g_param_value_set_default(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_set_default(
      pspec,
      value,
    );
  }

  late final _g_param_value_set_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_set_default');
  late final _g_param_value_set_default =
      _g_param_value_set_defaultPtr.asFunction<
          void Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_defaults(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_defaults(
      pspec,
      value,
    );
  }

  late final _g_param_value_defaultsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_defaults');
  late final _g_param_value_defaults = _g_param_value_defaultsPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_validate(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_validate(
      pspec,
      value,
    );
  }

  late final _g_param_value_validatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_validate');
  late final _g_param_value_validate = _g_param_value_validatePtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_is_valid(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_is_valid(
      pspec,
      value,
    );
  }

  late final _g_param_value_is_validPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_is_valid');
  late final _g_param_value_is_valid = _g_param_value_is_validPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_convert(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
    int strict_validation,
  ) {
    return _g_param_value_convert(
      pspec,
      src_value,
      dest_value,
      strict_validation,
    );
  }

  late final _g_param_value_convertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, gboolean)>>('g_param_value_convert');
  late final _g_param_value_convert = _g_param_value_convertPtr.asFunction<
      int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
          ffi.Pointer<GValue>, int)>();

  int g_param_values_cmp(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _g_param_values_cmp(
      pspec,
      value1,
      value2,
    );
  }

  late final _g_param_values_cmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('g_param_values_cmp');
  late final _g_param_values_cmp = _g_param_values_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  ffi.Pointer<gchar> g_param_spec_get_name(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_name(
      pspec,
    );
  }

  late final _g_param_spec_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_name');
  late final _g_param_spec_get_name = _g_param_spec_get_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<gchar> g_param_spec_get_nick(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_nick(
      pspec,
    );
  }

  late final _g_param_spec_get_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_nick');
  late final _g_param_spec_get_nick = _g_param_spec_get_nickPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<gchar> g_param_spec_get_blurb(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_blurb(
      pspec,
    );
  }

  late final _g_param_spec_get_blurbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_blurb');
  late final _g_param_spec_get_blurb = _g_param_spec_get_blurbPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GParamSpec>)>();

  void g_value_set_param(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_set_param(
      value,
      param,
    );
  }

  late final _g_value_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_set_param');
  late final _g_value_set_param = _g_value_set_paramPtr.asFunction<
      void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_value_get_param(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_param(
      value,
    );
  }

  late final _g_value_get_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GValue>)>>('g_value_get_param');
  late final _g_value_get_param = _g_value_get_paramPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GParamSpec> g_value_dup_param(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_param(
      value,
    );
  }

  late final _g_value_dup_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GValue>)>>('g_value_dup_param');
  late final _g_value_dup_param = _g_value_dup_paramPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GValue>)>();

  void g_value_take_param(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_take_param(
      value,
      param,
    );
  }

  late final _g_value_take_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_take_param');
  late final _g_value_take_param = _g_value_take_paramPtr.asFunction<
      void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  void g_value_set_param_take_ownership(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_set_param_take_ownership(
      value,
      param,
    );
  }

  late final _g_value_set_param_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_set_param_take_ownership');
  late final _g_value_set_param_take_ownership =
      _g_value_set_param_take_ownershipPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GValue> g_param_spec_get_default_value(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_default_value(
      pspec,
    );
  }

  late final _g_param_spec_get_default_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_default_value');
  late final _g_param_spec_get_default_value =
      _g_param_spec_get_default_valuePtr
          .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GParamSpec>)>();

  int g_param_spec_get_name_quark(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_name_quark(
      pspec,
    );
  }

  late final _g_param_spec_get_name_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_get_name_quark');
  late final _g_param_spec_get_name_quark = _g_param_spec_get_name_quarkPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>)>();

  int g_param_type_register_static(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GParamSpecTypeInfo> pspec_info,
  ) {
    return _g_param_type_register_static(
      name,
      pspec_info,
    );
  }

  late final _g_param_type_register_staticPtr = _lookup<
          ffi.NativeFunction<
              GType Function(
                  ffi.Pointer<gchar>, ffi.Pointer<GParamSpecTypeInfo>)>>(
      'g_param_type_register_static');
  late final _g_param_type_register_static =
      _g_param_type_register_staticPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<GParamSpecTypeInfo>)>();

  int g_param_spec_is_valid_name(
    ffi.Pointer<gchar> name,
  ) {
    return _g_param_spec_is_valid_name(
      name,
    );
  }

  late final _g_param_spec_is_valid_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_param_spec_is_valid_name');
  late final _g_param_spec_is_valid_name = _g_param_spec_is_valid_namePtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  gpointer g_param_spec_internal(
    int param_type,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int flags,
  ) {
    return _g_param_spec_internal(
      param_type,
      name,
      nick,
      blurb,
      flags,
    );
  }

  late final _g_param_spec_internalPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(GType, ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Int32)>>('g_param_spec_internal');
  late final _g_param_spec_internal = _g_param_spec_internalPtr.asFunction<
      gpointer Function(int, ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GParamSpecPool> g_param_spec_pool_new(
    int type_prefixing,
  ) {
    return _g_param_spec_pool_new(
      type_prefixing,
    );
  }

  late final _g_param_spec_pool_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GParamSpecPool> Function(gboolean)>>(
      'g_param_spec_pool_new');
  late final _g_param_spec_pool_new = _g_param_spec_pool_newPtr
      .asFunction<ffi.Pointer<GParamSpecPool> Function(int)>();

  void g_param_spec_pool_insert(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<GParamSpec> pspec,
    int owner_type,
  ) {
    return _g_param_spec_pool_insert(
      pool,
      pspec,
      owner_type,
    );
  }

  late final _g_param_spec_pool_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<GParamSpec>, GType)>>('g_param_spec_pool_insert');
  late final _g_param_spec_pool_insert =
      _g_param_spec_pool_insertPtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<GParamSpec>, int)>();

  void g_param_spec_pool_remove(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_pool_remove(
      pool,
      pspec,
    );
  }

  late final _g_param_spec_pool_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<GParamSpec>)>>('g_param_spec_pool_remove');
  late final _g_param_spec_pool_remove =
      _g_param_spec_pool_removePtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_pool_lookup(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<gchar> param_name,
    int owner_type,
    int walk_ancestors,
  ) {
    return _g_param_spec_pool_lookup(
      pool,
      param_name,
      owner_type,
      walk_ancestors,
    );
  }

  late final _g_param_spec_pool_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<gchar>,
              GType,
              gboolean)>>('g_param_spec_pool_lookup');
  late final _g_param_spec_pool_lookup =
      _g_param_spec_pool_lookupPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GList> g_param_spec_pool_list_owned(
    ffi.Pointer<GParamSpecPool> pool,
    int owner_type,
  ) {
    return _g_param_spec_pool_list_owned(
      pool,
      owner_type,
    );
  }

  late final _g_param_spec_pool_list_ownedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GParamSpecPool>,
              GType)>>('g_param_spec_pool_list_owned');
  late final _g_param_spec_pool_list_owned =
      _g_param_spec_pool_list_ownedPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GParamSpecPool>, int)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_param_spec_pool_list(
    ffi.Pointer<GParamSpecPool> pool,
    int owner_type,
    ffi.Pointer<guint> n_pspecs_p,
  ) {
    return _g_param_spec_pool_list(
      pool,
      owner_type,
      n_pspecs_p,
    );
  }

  late final _g_param_spec_pool_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GParamSpecPool>,
              GType,
              ffi.Pointer<guint>)>>('g_param_spec_pool_list');
  late final _g_param_spec_pool_list = _g_param_spec_pool_listPtr.asFunction<
      ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
          ffi.Pointer<GParamSpecPool>, int, ffi.Pointer<guint>)>();

  ffi.Pointer<GClosure> g_cclosure_new(
    GCallback callback_func,
    gpointer user_data,
    GClosureNotify destroy_data,
  ) {
    return _g_cclosure_new(
      callback_func,
      user_data,
      destroy_data,
    );
  }

  late final _g_cclosure_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, gpointer, GClosureNotify)>>('g_cclosure_new');
  late final _g_cclosure_new = _g_cclosure_newPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, gpointer, GClosureNotify)>();

  ffi.Pointer<GClosure> g_cclosure_new_swap(
    GCallback callback_func,
    gpointer user_data,
    GClosureNotify destroy_data,
  ) {
    return _g_cclosure_new_swap(
      callback_func,
      user_data,
      destroy_data,
    );
  }

  late final _g_cclosure_new_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, gpointer, GClosureNotify)>>('g_cclosure_new_swap');
  late final _g_cclosure_new_swap = _g_cclosure_new_swapPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, gpointer, GClosureNotify)>();

  ffi.Pointer<GClosure> g_signal_type_cclosure_new(
    int itype,
    int struct_offset,
  ) {
    return _g_signal_type_cclosure_new(
      itype,
      struct_offset,
    );
  }

  late final _g_signal_type_cclosure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GClosure> Function(GType, guint)>>(
          'g_signal_type_cclosure_new');
  late final _g_signal_type_cclosure_new = _g_signal_type_cclosure_newPtr
      .asFunction<ffi.Pointer<GClosure> Function(int, int)>();

  ffi.Pointer<GClosure> g_closure_ref(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_ref(
      closure,
    );
  }

  late final _g_closure_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              ffi.Pointer<GClosure>)>>('g_closure_ref');
  late final _g_closure_ref = _g_closure_refPtr
      .asFunction<ffi.Pointer<GClosure> Function(ffi.Pointer<GClosure>)>();

  void g_closure_sink(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_sink(
      closure,
    );
  }

  late final _g_closure_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_sink');
  late final _g_closure_sink =
      _g_closure_sinkPtr.asFunction<void Function(ffi.Pointer<GClosure>)>();

  void g_closure_unref(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_unref(
      closure,
    );
  }

  late final _g_closure_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_unref');
  late final _g_closure_unref =
      _g_closure_unrefPtr.asFunction<void Function(ffi.Pointer<GClosure>)>();

  ffi.Pointer<GClosure> g_closure_new_simple(
    int sizeof_closure,
    gpointer data,
  ) {
    return _g_closure_new_simple(
      sizeof_closure,
      data,
    );
  }

  late final _g_closure_new_simplePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GClosure> Function(guint, gpointer)>>(
      'g_closure_new_simple');
  late final _g_closure_new_simple = _g_closure_new_simplePtr
      .asFunction<ffi.Pointer<GClosure> Function(int, gpointer)>();

  void g_closure_add_finalize_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_add_finalize_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_add_finalize_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_add_finalize_notifier');
  late final _g_closure_add_finalize_notifier =
      _g_closure_add_finalize_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_remove_finalize_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_remove_finalize_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_remove_finalize_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_remove_finalize_notifier');
  late final _g_closure_remove_finalize_notifier =
      _g_closure_remove_finalize_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_add_invalidate_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_add_invalidate_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_add_invalidate_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_add_invalidate_notifier');
  late final _g_closure_add_invalidate_notifier =
      _g_closure_add_invalidate_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_remove_invalidate_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_remove_invalidate_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_remove_invalidate_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_remove_invalidate_notifier');
  late final _g_closure_remove_invalidate_notifier =
      _g_closure_remove_invalidate_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_add_marshal_guards(
    ffi.Pointer<GClosure> closure,
    gpointer pre_marshal_data,
    GClosureNotify pre_marshal_notify,
    gpointer post_marshal_data,
    GClosureNotify post_marshal_notify,
  ) {
    return _g_closure_add_marshal_guards(
      closure,
      pre_marshal_data,
      pre_marshal_notify,
      post_marshal_data,
      post_marshal_notify,
    );
  }

  late final _g_closure_add_marshal_guardsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify,
              gpointer, GClosureNotify)>>('g_closure_add_marshal_guards');
  late final _g_closure_add_marshal_guards =
      _g_closure_add_marshal_guardsPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify,
              gpointer, GClosureNotify)>();

  void g_closure_set_marshal(
    ffi.Pointer<GClosure> closure,
    GClosureMarshal marshal,
  ) {
    return _g_closure_set_marshal(
      closure,
      marshal,
    );
  }

  late final _g_closure_set_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>,
              GClosureMarshal)>>('g_closure_set_marshal');
  late final _g_closure_set_marshal = _g_closure_set_marshalPtr
      .asFunction<void Function(ffi.Pointer<GClosure>, GClosureMarshal)>();

  void g_closure_set_meta_marshal(
    ffi.Pointer<GClosure> closure,
    gpointer marshal_data,
    GClosureMarshal meta_marshal,
  ) {
    return _g_closure_set_meta_marshal(
      closure,
      marshal_data,
      meta_marshal,
    );
  }

  late final _g_closure_set_meta_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureMarshal)>>('g_closure_set_meta_marshal');
  late final _g_closure_set_meta_marshal =
      _g_closure_set_meta_marshalPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureMarshal)>();

  void g_closure_invalidate(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_invalidate(
      closure,
    );
  }

  late final _g_closure_invalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_invalidate');
  late final _g_closure_invalidate = _g_closure_invalidatePtr
      .asFunction<void Function(ffi.Pointer<GClosure>)>();

  void g_closure_invoke(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
  ) {
    return _g_closure_invoke(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
    );
  }

  late final _g_closure_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, guint,
              ffi.Pointer<GValue>, gpointer)>>('g_closure_invoke');
  late final _g_closure_invoke = _g_closure_invokePtr.asFunction<
      void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
          ffi.Pointer<GValue>, gpointer)>();

  void g_cclosure_marshal_generic(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_gvalue,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_generic(
      closure,
      return_gvalue,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_genericPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_generic');
  late final _g_cclosure_marshal_generic =
      _g_cclosure_marshal_genericPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_generic_va(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args_list,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_generic_va(
      closure,
      return_value,
      instance,
      args_list,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_generic_vaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_generic_va');
  late final _g_cclosure_marshal_generic_va =
      _g_cclosure_marshal_generic_vaPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__VOID(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__VOID(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__VOIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__VOID');
  late final _g_cclosure_marshal_VOID__VOID =
      _g_cclosure_marshal_VOID__VOIDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__VOIDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__VOIDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__VOIDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__VOIDv');
  late final _g_cclosure_marshal_VOID__VOIDv =
      _g_cclosure_marshal_VOID__VOIDvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__BOOLEAN(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__BOOLEAN(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__BOOLEANPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__BOOLEAN');
  late final _g_cclosure_marshal_VOID__BOOLEAN =
      _g_cclosure_marshal_VOID__BOOLEANPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__BOOLEANv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__BOOLEANv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__BOOLEANvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__BOOLEANv');
  late final _g_cclosure_marshal_VOID__BOOLEANv =
      _g_cclosure_marshal_VOID__BOOLEANvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__CHAR(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__CHAR(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__CHARPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__CHAR');
  late final _g_cclosure_marshal_VOID__CHAR =
      _g_cclosure_marshal_VOID__CHARPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__CHARv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__CHARv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__CHARvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__CHARv');
  late final _g_cclosure_marshal_VOID__CHARv =
      _g_cclosure_marshal_VOID__CHARvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UCHAR(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UCHAR(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UCHARPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__UCHAR');
  late final _g_cclosure_marshal_VOID__UCHAR =
      _g_cclosure_marshal_VOID__UCHARPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__UCHARv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UCHARv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UCHARvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UCHARv');
  late final _g_cclosure_marshal_VOID__UCHARv =
      _g_cclosure_marshal_VOID__UCHARvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__INT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__INT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__INTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__INT');
  late final _g_cclosure_marshal_VOID__INT =
      _g_cclosure_marshal_VOID__INTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__INTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__INTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__INTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__INTv');
  late final _g_cclosure_marshal_VOID__INTv =
      _g_cclosure_marshal_VOID__INTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UINT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UINT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UINTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__UINT');
  late final _g_cclosure_marshal_VOID__UINT =
      _g_cclosure_marshal_VOID__UINTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__UINTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UINTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UINTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UINTv');
  late final _g_cclosure_marshal_VOID__UINTv =
      _g_cclosure_marshal_VOID__UINTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__LONG(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__LONG(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__LONGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__LONG');
  late final _g_cclosure_marshal_VOID__LONG =
      _g_cclosure_marshal_VOID__LONGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__LONGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__LONGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__LONGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__LONGv');
  late final _g_cclosure_marshal_VOID__LONGv =
      _g_cclosure_marshal_VOID__LONGvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__ULONG(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__ULONG(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__ULONGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__ULONG');
  late final _g_cclosure_marshal_VOID__ULONG =
      _g_cclosure_marshal_VOID__ULONGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__ULONGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__ULONGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__ULONGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__ULONGv');
  late final _g_cclosure_marshal_VOID__ULONGv =
      _g_cclosure_marshal_VOID__ULONGvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__ENUM(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__ENUM(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__ENUMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__ENUM');
  late final _g_cclosure_marshal_VOID__ENUM =
      _g_cclosure_marshal_VOID__ENUMPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__ENUMv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__ENUMv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__ENUMvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__ENUMv');
  late final _g_cclosure_marshal_VOID__ENUMv =
      _g_cclosure_marshal_VOID__ENUMvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__FLAGS(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__FLAGS(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__FLAGSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__FLAGS');
  late final _g_cclosure_marshal_VOID__FLAGS =
      _g_cclosure_marshal_VOID__FLAGSPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__FLAGSv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__FLAGSv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__FLAGSvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__FLAGSv');
  late final _g_cclosure_marshal_VOID__FLAGSv =
      _g_cclosure_marshal_VOID__FLAGSvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__FLOAT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__FLOAT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__FLOATPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__FLOAT');
  late final _g_cclosure_marshal_VOID__FLOAT =
      _g_cclosure_marshal_VOID__FLOATPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__FLOATv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__FLOATv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__FLOATvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__FLOATv');
  late final _g_cclosure_marshal_VOID__FLOATv =
      _g_cclosure_marshal_VOID__FLOATvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__DOUBLE(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__DOUBLE(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__DOUBLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__DOUBLE');
  late final _g_cclosure_marshal_VOID__DOUBLE =
      _g_cclosure_marshal_VOID__DOUBLEPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__DOUBLEv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__DOUBLEv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__DOUBLEvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__DOUBLEv');
  late final _g_cclosure_marshal_VOID__DOUBLEv =
      _g_cclosure_marshal_VOID__DOUBLEvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__STRING(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__STRING(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__STRING');
  late final _g_cclosure_marshal_VOID__STRING =
      _g_cclosure_marshal_VOID__STRINGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__STRINGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__STRINGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__STRINGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__STRINGv');
  late final _g_cclosure_marshal_VOID__STRINGv =
      _g_cclosure_marshal_VOID__STRINGvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__PARAM(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__PARAM(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__PARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__PARAM');
  late final _g_cclosure_marshal_VOID__PARAM =
      _g_cclosure_marshal_VOID__PARAMPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__PARAMv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__PARAMv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__PARAMvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__PARAMv');
  late final _g_cclosure_marshal_VOID__PARAMv =
      _g_cclosure_marshal_VOID__PARAMvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__BOXED(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__BOXED(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__BOXEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__BOXED');
  late final _g_cclosure_marshal_VOID__BOXED =
      _g_cclosure_marshal_VOID__BOXEDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__BOXEDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__BOXEDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__BOXEDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__BOXEDv');
  late final _g_cclosure_marshal_VOID__BOXEDv =
      _g_cclosure_marshal_VOID__BOXEDvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__POINTER');
  late final _g_cclosure_marshal_VOID__POINTER =
      _g_cclosure_marshal_VOID__POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__POINTERvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__POINTERv');
  late final _g_cclosure_marshal_VOID__POINTERv =
      _g_cclosure_marshal_VOID__POINTERvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__OBJECT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__OBJECT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__OBJECT');
  late final _g_cclosure_marshal_VOID__OBJECT =
      _g_cclosure_marshal_VOID__OBJECTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__OBJECTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__OBJECTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__OBJECTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__OBJECTv');
  late final _g_cclosure_marshal_VOID__OBJECTv =
      _g_cclosure_marshal_VOID__OBJECTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__VARIANT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__VARIANT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__VARIANTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__VARIANT');
  late final _g_cclosure_marshal_VOID__VARIANT =
      _g_cclosure_marshal_VOID__VARIANTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__VARIANTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__VARIANTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__VARIANTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__VARIANTv');
  late final _g_cclosure_marshal_VOID__VARIANTv =
      _g_cclosure_marshal_VOID__VARIANTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UINT_POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UINT_POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UINT_POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__UINT_POINTER');
  late final _g_cclosure_marshal_VOID__UINT_POINTER =
      _g_cclosure_marshal_VOID__UINT_POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__UINT_POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UINT_POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UINT_POINTERvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UINT_POINTERv');
  late final _g_cclosure_marshal_VOID__UINT_POINTERv =
      _g_cclosure_marshal_VOID__UINT_POINTERvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_BOOLEAN__FLAGS(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_BOOLEAN__FLAGS(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__FLAGSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_BOOLEAN__FLAGS');
  late final _g_cclosure_marshal_BOOLEAN__FLAGS =
      _g_cclosure_marshal_BOOLEAN__FLAGSPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_BOOLEAN__FLAGSv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_BOOLEAN__FLAGSv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__FLAGSvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_BOOLEAN__FLAGSv');
  late final _g_cclosure_marshal_BOOLEAN__FLAGSv =
      _g_cclosure_marshal_BOOLEAN__FLAGSvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_STRING__OBJECT_POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_STRING__OBJECT_POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_STRING__OBJECT_POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_STRING__OBJECT_POINTER');
  late final _g_cclosure_marshal_STRING__OBJECT_POINTER =
      _g_cclosure_marshal_STRING__OBJECT_POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_STRING__OBJECT_POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_STRING__OBJECT_POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_STRING__OBJECT_POINTERvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GClosure>,
                  ffi.Pointer<GValue>,
                  gpointer,
                  ffi.Pointer<__va_list_tag>,
                  gpointer,
                  ffi.Int,
                  ffi.Pointer<GType>)>>(
      'g_cclosure_marshal_STRING__OBJECT_POINTERv');
  late final _g_cclosure_marshal_STRING__OBJECT_POINTERv =
      _g_cclosure_marshal_STRING__OBJECT_POINTERvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_BOOLEAN__BOXED_BOXED');
  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXED =
      _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv');
  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv =
      _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  int g_signal_newv(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    ffi.Pointer<GClosure> class_closure,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_signal_newv(
      signal_name,
      itype,
      signal_flags,
      class_closure,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
      param_types,
    );
  }

  late final _g_signal_newvPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint,
              ffi.Pointer<GType>)>>('g_signal_newv');
  late final _g_signal_newv = _g_signal_newvPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          int,
          int,
          ffi.Pointer<GClosure>,
          GSignalAccumulator,
          gpointer,
          GSignalCMarshaller,
          int,
          int,
          ffi.Pointer<GType>)>();

  int g_signal_new_valist(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    ffi.Pointer<GClosure> class_closure,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_signal_new_valist(
      signal_name,
      itype,
      signal_flags,
      class_closure,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
      args,
    );
  }

  late final _g_signal_new_valistPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint,
              ffi.Pointer<__va_list_tag>)>>('g_signal_new_valist');
  late final _g_signal_new_valist = _g_signal_new_valistPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          int,
          int,
          ffi.Pointer<GClosure>,
          GSignalAccumulator,
          gpointer,
          GSignalCMarshaller,
          int,
          int,
          ffi.Pointer<__va_list_tag>)>();

  int g_signal_new(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    int class_offset,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
  ) {
    return _g_signal_new(
      signal_name,
      itype,
      signal_flags,
      class_offset,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
    );
  }

  late final _g_signal_newPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              guint,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint)>>('g_signal_new');
  late final _g_signal_new = _g_signal_newPtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, int, int, GSignalAccumulator,
          gpointer, GSignalCMarshaller, int, int)>();

  int g_signal_new_class_handler(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    GCallback class_handler,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
  ) {
    return _g_signal_new_class_handler(
      signal_name,
      itype,
      signal_flags,
      class_handler,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
    );
  }

  late final _g_signal_new_class_handlerPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              GCallback,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint)>>('g_signal_new_class_handler');
  late final _g_signal_new_class_handler =
      _g_signal_new_class_handlerPtr.asFunction<
          int Function(ffi.Pointer<gchar>, int, int, GCallback,
              GSignalAccumulator, gpointer, GSignalCMarshaller, int, int)>();

  void g_signal_set_va_marshaller(
    int signal_id,
    int instance_type,
    GSignalCVaMarshaller va_marshaller,
  ) {
    return _g_signal_set_va_marshaller(
      signal_id,
      instance_type,
      va_marshaller,
    );
  }

  late final _g_signal_set_va_marshallerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(guint, GType,
              GSignalCVaMarshaller)>>('g_signal_set_va_marshaller');
  late final _g_signal_set_va_marshaller = _g_signal_set_va_marshallerPtr
      .asFunction<void Function(int, int, GSignalCVaMarshaller)>();

  void g_signal_emitv(
    ffi.Pointer<GValue> instance_and_params,
    int signal_id,
    int detail,
    ffi.Pointer<GValue> return_value,
  ) {
    return _g_signal_emitv(
      instance_and_params,
      signal_id,
      detail,
      return_value,
    );
  }

  late final _g_signal_emitvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, guint, GQuark,
              ffi.Pointer<GValue>)>>('g_signal_emitv');
  late final _g_signal_emitv = _g_signal_emitvPtr.asFunction<
      void Function(ffi.Pointer<GValue>, int, int, ffi.Pointer<GValue>)>();

  void g_signal_emit_valist(
    gpointer instance,
    int signal_id,
    int detail,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_signal_emit_valist(
      instance,
      signal_id,
      detail,
      var_args,
    );
  }

  late final _g_signal_emit_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer, guint, GQuark,
              ffi.Pointer<__va_list_tag>)>>('g_signal_emit_valist');
  late final _g_signal_emit_valist = _g_signal_emit_valistPtr.asFunction<
      void Function(gpointer, int, int, ffi.Pointer<__va_list_tag>)>();

  void g_signal_emit(
    gpointer instance,
    int signal_id,
    int detail,
  ) {
    return _g_signal_emit(
      instance,
      signal_id,
      detail,
    );
  }

  late final _g_signal_emitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, guint, GQuark)>>(
          'g_signal_emit');
  late final _g_signal_emit =
      _g_signal_emitPtr.asFunction<void Function(gpointer, int, int)>();

  void g_signal_emit_by_name(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
  ) {
    return _g_signal_emit_by_name(
      instance,
      detailed_signal,
    );
  }

  late final _g_signal_emit_by_namePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_signal_emit_by_name');
  late final _g_signal_emit_by_name = _g_signal_emit_by_namePtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  int g_signal_lookup(
    ffi.Pointer<gchar> name,
    int itype,
  ) {
    return _g_signal_lookup(
      name,
      itype,
    );
  }

  late final _g_signal_lookupPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<gchar>, GType)>>(
          'g_signal_lookup');
  late final _g_signal_lookup =
      _g_signal_lookupPtr.asFunction<int Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_signal_name(
    int signal_id,
  ) {
    return _g_signal_name(
      signal_id,
    );
  }

  late final _g_signal_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(guint)>>(
          'g_signal_name');
  late final _g_signal_name =
      _g_signal_namePtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  void g_signal_query(
    int signal_id,
    ffi.Pointer<GSignalQuery> query,
  ) {
    return _g_signal_query(
      signal_id,
      query,
    );
  }

  late final _g_signal_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              guint, ffi.Pointer<GSignalQuery>)>>('g_signal_query');
  late final _g_signal_query = _g_signal_queryPtr
      .asFunction<void Function(int, ffi.Pointer<GSignalQuery>)>();

  ffi.Pointer<guint> g_signal_list_ids(
    int itype,
    ffi.Pointer<guint> n_ids,
  ) {
    return _g_signal_list_ids(
      itype,
      n_ids,
    );
  }

  late final _g_signal_list_idsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint> Function(
              GType, ffi.Pointer<guint>)>>('g_signal_list_ids');
  late final _g_signal_list_ids = _g_signal_list_idsPtr
      .asFunction<ffi.Pointer<guint> Function(int, ffi.Pointer<guint>)>();

  int g_signal_is_valid_name(
    ffi.Pointer<gchar> name,
  ) {
    return _g_signal_is_valid_name(
      name,
    );
  }

  late final _g_signal_is_valid_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_signal_is_valid_name');
  late final _g_signal_is_valid_name =
      _g_signal_is_valid_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_signal_parse_name(
    ffi.Pointer<gchar> detailed_signal,
    int itype,
    ffi.Pointer<guint> signal_id_p,
    ffi.Pointer<GQuark> detail_p,
    int force_detail_quark,
  ) {
    return _g_signal_parse_name(
      detailed_signal,
      itype,
      signal_id_p,
      detail_p,
      force_detail_quark,
    );
  }

  late final _g_signal_parse_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, GType, ffi.Pointer<guint>,
              ffi.Pointer<GQuark>, gboolean)>>('g_signal_parse_name');
  late final _g_signal_parse_name = _g_signal_parse_namePtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, ffi.Pointer<guint>,
          ffi.Pointer<GQuark>, int)>();

  ffi.Pointer<GSignalInvocationHint> g_signal_get_invocation_hint(
    gpointer instance,
  ) {
    return _g_signal_get_invocation_hint(
      instance,
    );
  }

  late final _g_signal_get_invocation_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSignalInvocationHint> Function(
              gpointer)>>('g_signal_get_invocation_hint');
  late final _g_signal_get_invocation_hint = _g_signal_get_invocation_hintPtr
      .asFunction<ffi.Pointer<GSignalInvocationHint> Function(gpointer)>();

  void g_signal_stop_emission(
    gpointer instance,
    int signal_id,
    int detail,
  ) {
    return _g_signal_stop_emission(
      instance,
      signal_id,
      detail,
    );
  }

  late final _g_signal_stop_emissionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, guint, GQuark)>>(
          'g_signal_stop_emission');
  late final _g_signal_stop_emission = _g_signal_stop_emissionPtr
      .asFunction<void Function(gpointer, int, int)>();

  void g_signal_stop_emission_by_name(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
  ) {
    return _g_signal_stop_emission_by_name(
      instance,
      detailed_signal,
    );
  }

  late final _g_signal_stop_emission_by_namePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_signal_stop_emission_by_name');
  late final _g_signal_stop_emission_by_name =
      _g_signal_stop_emission_by_namePtr
          .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  int g_signal_add_emission_hook(
    int signal_id,
    int detail,
    GSignalEmissionHook hook_func,
    gpointer hook_data,
    GDestroyNotify data_destroy,
  ) {
    return _g_signal_add_emission_hook(
      signal_id,
      detail,
      hook_func,
      hook_data,
      data_destroy,
    );
  }

  late final _g_signal_add_emission_hookPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(guint, GQuark, GSignalEmissionHook, gpointer,
              GDestroyNotify)>>('g_signal_add_emission_hook');
  late final _g_signal_add_emission_hook =
      _g_signal_add_emission_hookPtr.asFunction<
          int Function(
              int, int, GSignalEmissionHook, gpointer, GDestroyNotify)>();

  void g_signal_remove_emission_hook(
    int signal_id,
    int hook_id,
  ) {
    return _g_signal_remove_emission_hook(
      signal_id,
      hook_id,
    );
  }

  late final _g_signal_remove_emission_hookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint, gulong)>>(
          'g_signal_remove_emission_hook');
  late final _g_signal_remove_emission_hook =
      _g_signal_remove_emission_hookPtr.asFunction<void Function(int, int)>();

  int g_signal_has_handler_pending(
    gpointer instance,
    int signal_id,
    int detail,
    int may_be_blocked,
  ) {
    return _g_signal_has_handler_pending(
      instance,
      signal_id,
      detail,
      may_be_blocked,
    );
  }

  late final _g_signal_has_handler_pendingPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gpointer, guint, GQuark,
              gboolean)>>('g_signal_has_handler_pending');
  late final _g_signal_has_handler_pending = _g_signal_has_handler_pendingPtr
      .asFunction<int Function(gpointer, int, int, int)>();

  int g_signal_connect_closure_by_id(
    gpointer instance,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_connect_closure_by_id(
      instance,
      signal_id,
      detail,
      closure,
      after,
    );
  }

  late final _g_signal_connect_closure_by_idPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, guint, GQuark, ffi.Pointer<GClosure>,
              gboolean)>>('g_signal_connect_closure_by_id');
  late final _g_signal_connect_closure_by_id =
      _g_signal_connect_closure_by_idPtr.asFunction<
          int Function(gpointer, int, int, ffi.Pointer<GClosure>, int)>();

  int g_signal_connect_closure(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_connect_closure(
      instance,
      detailed_signal,
      closure,
      after,
    );
  }

  late final _g_signal_connect_closurePtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, ffi.Pointer<gchar>, ffi.Pointer<GClosure>,
              gboolean)>>('g_signal_connect_closure');
  late final _g_signal_connect_closure =
      _g_signal_connect_closurePtr.asFunction<
          int Function(
              gpointer, ffi.Pointer<gchar>, ffi.Pointer<GClosure>, int)>();

  int g_signal_connect_data(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
    GClosureNotify destroy_data,
    int connect_flags,
  ) {
    return _g_signal_connect_data(
      instance,
      detailed_signal,
      c_handler,
      data,
      destroy_data,
      connect_flags,
    );
  }

  late final _g_signal_connect_dataPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer,
              GClosureNotify, ffi.Int32)>>('g_signal_connect_data');
  late final _g_signal_connect_data = _g_signal_connect_dataPtr.asFunction<
      int Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer,
          GClosureNotify, int)>();

  void g_signal_handler_block(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_block(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gulong)>>(
          'g_signal_handler_block');
  late final _g_signal_handler_block =
      _g_signal_handler_blockPtr.asFunction<void Function(gpointer, int)>();

  void g_signal_handler_unblock(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_unblock(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_unblockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gulong)>>(
          'g_signal_handler_unblock');
  late final _g_signal_handler_unblock =
      _g_signal_handler_unblockPtr.asFunction<void Function(gpointer, int)>();

  void g_signal_handler_disconnect(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_disconnect(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gulong)>>(
          'g_signal_handler_disconnect');
  late final _g_signal_handler_disconnect = _g_signal_handler_disconnectPtr
      .asFunction<void Function(gpointer, int)>();

  int g_signal_handler_is_connected(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_is_connected(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_is_connectedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gpointer, gulong)>>(
          'g_signal_handler_is_connected');
  late final _g_signal_handler_is_connected = _g_signal_handler_is_connectedPtr
      .asFunction<int Function(gpointer, int)>();

  int g_signal_handler_find(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handler_find(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handler_findPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handler_find');
  late final _g_signal_handler_find = _g_signal_handler_findPtr.asFunction<
      int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
          gpointer)>();

  int g_signal_handlers_block_matched(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handlers_block_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_block_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handlers_block_matched');
  late final _g_signal_handlers_block_matched =
      _g_signal_handlers_block_matchedPtr.asFunction<
          int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
              gpointer)>();

  int g_signal_handlers_unblock_matched(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handlers_unblock_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_unblock_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handlers_unblock_matched');
  late final _g_signal_handlers_unblock_matched =
      _g_signal_handlers_unblock_matchedPtr.asFunction<
          int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
              gpointer)>();

  int g_signal_handlers_disconnect_matched(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handlers_disconnect_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_disconnect_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handlers_disconnect_matched');
  late final _g_signal_handlers_disconnect_matched =
      _g_signal_handlers_disconnect_matchedPtr.asFunction<
          int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
              gpointer)>();

  void g_clear_signal_handler(
    ffi.Pointer<gulong> handler_id_ptr,
    gpointer instance,
  ) {
    return _g_clear_signal_handler(
      handler_id_ptr,
      instance,
    );
  }

  late final _g_clear_signal_handlerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gulong>, gpointer)>>(
      'g_clear_signal_handler');
  late final _g_clear_signal_handler = _g_clear_signal_handlerPtr
      .asFunction<void Function(ffi.Pointer<gulong>, gpointer)>();

  void g_signal_override_class_closure(
    int signal_id,
    int instance_type,
    ffi.Pointer<GClosure> class_closure,
  ) {
    return _g_signal_override_class_closure(
      signal_id,
      instance_type,
      class_closure,
    );
  }

  late final _g_signal_override_class_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(guint, GType,
              ffi.Pointer<GClosure>)>>('g_signal_override_class_closure');
  late final _g_signal_override_class_closure =
      _g_signal_override_class_closurePtr
          .asFunction<void Function(int, int, ffi.Pointer<GClosure>)>();

  void g_signal_override_class_handler(
    ffi.Pointer<gchar> signal_name,
    int instance_type,
    GCallback class_handler,
  ) {
    return _g_signal_override_class_handler(
      signal_name,
      instance_type,
      class_handler,
    );
  }

  late final _g_signal_override_class_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, GType,
              GCallback)>>('g_signal_override_class_handler');
  late final _g_signal_override_class_handler =
      _g_signal_override_class_handlerPtr
          .asFunction<void Function(ffi.Pointer<gchar>, int, GCallback)>();

  void g_signal_chain_from_overridden(
    ffi.Pointer<GValue> instance_and_params,
    ffi.Pointer<GValue> return_value,
  ) {
    return _g_signal_chain_from_overridden(
      instance_and_params,
      return_value,
    );
  }

  late final _g_signal_chain_from_overriddenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('g_signal_chain_from_overridden');
  late final _g_signal_chain_from_overridden =
      _g_signal_chain_from_overriddenPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void g_signal_chain_from_overridden_handler(
    gpointer instance,
  ) {
    return _g_signal_chain_from_overridden_handler(
      instance,
    );
  }

  late final _g_signal_chain_from_overridden_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_signal_chain_from_overridden_handler');
  late final _g_signal_chain_from_overridden_handler =
      _g_signal_chain_from_overridden_handlerPtr
          .asFunction<void Function(gpointer)>();

  int g_signal_accumulator_true_handled(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    gpointer dummy,
  ) {
    return _g_signal_accumulator_true_handled(
      ihint,
      return_accu,
      handler_return,
      dummy,
    );
  }

  late final _g_signal_accumulator_true_handledPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSignalInvocationHint>,
              ffi.Pointer<GValue>,
              ffi.Pointer<GValue>,
              gpointer)>>('g_signal_accumulator_true_handled');
  late final _g_signal_accumulator_true_handled =
      _g_signal_accumulator_true_handledPtr.asFunction<
          int Function(ffi.Pointer<GSignalInvocationHint>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, gpointer)>();

  int g_signal_accumulator_first_wins(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    gpointer dummy,
  ) {
    return _g_signal_accumulator_first_wins(
      ihint,
      return_accu,
      handler_return,
      dummy,
    );
  }

  late final _g_signal_accumulator_first_winsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSignalInvocationHint>,
              ffi.Pointer<GValue>,
              ffi.Pointer<GValue>,
              gpointer)>>('g_signal_accumulator_first_wins');
  late final _g_signal_accumulator_first_wins =
      _g_signal_accumulator_first_winsPtr.asFunction<
          int Function(ffi.Pointer<GSignalInvocationHint>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, gpointer)>();

  void g_signal_handlers_destroy(
    gpointer instance,
  ) {
    return _g_signal_handlers_destroy(
      instance,
    );
  }

  late final _g_signal_handlers_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_signal_handlers_destroy');
  late final _g_signal_handlers_destroy =
      _g_signal_handlers_destroyPtr.asFunction<void Function(gpointer)>();

  int g_date_get_type() {
    return _g_date_get_type();
  }

  late final _g_date_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_date_get_type');
  late final _g_date_get_type =
      _g_date_get_typePtr.asFunction<int Function()>();

  int g_strv_get_type() {
    return _g_strv_get_type();
  }

  late final _g_strv_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_strv_get_type');
  late final _g_strv_get_type =
      _g_strv_get_typePtr.asFunction<int Function()>();

  int g_gstring_get_type() {
    return _g_gstring_get_type();
  }

  late final _g_gstring_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_gstring_get_type');
  late final _g_gstring_get_type =
      _g_gstring_get_typePtr.asFunction<int Function()>();

  int g_hash_table_get_type() {
    return _g_hash_table_get_type();
  }

  late final _g_hash_table_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_hash_table_get_type');
  late final _g_hash_table_get_type =
      _g_hash_table_get_typePtr.asFunction<int Function()>();

  int g_array_get_type() {
    return _g_array_get_type();
  }

  late final _g_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_array_get_type');
  late final _g_array_get_type =
      _g_array_get_typePtr.asFunction<int Function()>();

  int g_byte_array_get_type() {
    return _g_byte_array_get_type();
  }

  late final _g_byte_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_byte_array_get_type');
  late final _g_byte_array_get_type =
      _g_byte_array_get_typePtr.asFunction<int Function()>();

  int g_ptr_array_get_type() {
    return _g_ptr_array_get_type();
  }

  late final _g_ptr_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_ptr_array_get_type');
  late final _g_ptr_array_get_type =
      _g_ptr_array_get_typePtr.asFunction<int Function()>();

  int g_bytes_get_type() {
    return _g_bytes_get_type();
  }

  late final _g_bytes_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_bytes_get_type');
  late final _g_bytes_get_type =
      _g_bytes_get_typePtr.asFunction<int Function()>();

  int g_variant_type_get_gtype() {
    return _g_variant_type_get_gtype();
  }

  late final _g_variant_type_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_type_get_gtype');
  late final _g_variant_type_get_gtype =
      _g_variant_type_get_gtypePtr.asFunction<int Function()>();

  int g_regex_get_type() {
    return _g_regex_get_type();
  }

  late final _g_regex_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_regex_get_type');
  late final _g_regex_get_type =
      _g_regex_get_typePtr.asFunction<int Function()>();

  int g_match_info_get_type() {
    return _g_match_info_get_type();
  }

  late final _g_match_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_match_info_get_type');
  late final _g_match_info_get_type =
      _g_match_info_get_typePtr.asFunction<int Function()>();

  int g_error_get_type() {
    return _g_error_get_type();
  }

  late final _g_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_error_get_type');
  late final _g_error_get_type =
      _g_error_get_typePtr.asFunction<int Function()>();

  int g_date_time_get_type() {
    return _g_date_time_get_type();
  }

  late final _g_date_time_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_date_time_get_type');
  late final _g_date_time_get_type =
      _g_date_time_get_typePtr.asFunction<int Function()>();

  int g_time_zone_get_type() {
    return _g_time_zone_get_type();
  }

  late final _g_time_zone_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_time_zone_get_type');
  late final _g_time_zone_get_type =
      _g_time_zone_get_typePtr.asFunction<int Function()>();

  int g_io_channel_get_type() {
    return _g_io_channel_get_type();
  }

  late final _g_io_channel_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_channel_get_type');
  late final _g_io_channel_get_type =
      _g_io_channel_get_typePtr.asFunction<int Function()>();

  int g_io_condition_get_type() {
    return _g_io_condition_get_type();
  }

  late final _g_io_condition_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_condition_get_type');
  late final _g_io_condition_get_type =
      _g_io_condition_get_typePtr.asFunction<int Function()>();

  int g_variant_builder_get_type() {
    return _g_variant_builder_get_type();
  }

  late final _g_variant_builder_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_variant_builder_get_type');
  late final _g_variant_builder_get_type =
      _g_variant_builder_get_typePtr.asFunction<int Function()>();

  int g_variant_dict_get_type() {
    return _g_variant_dict_get_type();
  }

  late final _g_variant_dict_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_dict_get_type');
  late final _g_variant_dict_get_type =
      _g_variant_dict_get_typePtr.asFunction<int Function()>();

  int g_key_file_get_type() {
    return _g_key_file_get_type();
  }

  late final _g_key_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_key_file_get_type');
  late final _g_key_file_get_type =
      _g_key_file_get_typePtr.asFunction<int Function()>();

  int g_main_loop_get_type() {
    return _g_main_loop_get_type();
  }

  late final _g_main_loop_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_main_loop_get_type');
  late final _g_main_loop_get_type =
      _g_main_loop_get_typePtr.asFunction<int Function()>();

  int g_main_context_get_type() {
    return _g_main_context_get_type();
  }

  late final _g_main_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_main_context_get_type');
  late final _g_main_context_get_type =
      _g_main_context_get_typePtr.asFunction<int Function()>();

  int g_source_get_type() {
    return _g_source_get_type();
  }

  late final _g_source_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_source_get_type');
  late final _g_source_get_type =
      _g_source_get_typePtr.asFunction<int Function()>();

  int g_pollfd_get_type() {
    return _g_pollfd_get_type();
  }

  late final _g_pollfd_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_pollfd_get_type');
  late final _g_pollfd_get_type =
      _g_pollfd_get_typePtr.asFunction<int Function()>();

  int g_thread_get_type() {
    return _g_thread_get_type();
  }

  late final _g_thread_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_thread_get_type');
  late final _g_thread_get_type =
      _g_thread_get_typePtr.asFunction<int Function()>();

  int g_checksum_get_type() {
    return _g_checksum_get_type();
  }

  late final _g_checksum_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_checksum_get_type');
  late final _g_checksum_get_type =
      _g_checksum_get_typePtr.asFunction<int Function()>();

  int g_markup_parse_context_get_type() {
    return _g_markup_parse_context_get_type();
  }

  late final _g_markup_parse_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_markup_parse_context_get_type');
  late final _g_markup_parse_context_get_type =
      _g_markup_parse_context_get_typePtr.asFunction<int Function()>();

  int g_mapped_file_get_type() {
    return _g_mapped_file_get_type();
  }

  late final _g_mapped_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_mapped_file_get_type');
  late final _g_mapped_file_get_type =
      _g_mapped_file_get_typePtr.asFunction<int Function()>();

  int g_option_group_get_type() {
    return _g_option_group_get_type();
  }

  late final _g_option_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_option_group_get_type');
  late final _g_option_group_get_type =
      _g_option_group_get_typePtr.asFunction<int Function()>();

  int g_uri_get_type() {
    return _g_uri_get_type();
  }

  late final _g_uri_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_uri_get_type');
  late final _g_uri_get_type = _g_uri_get_typePtr.asFunction<int Function()>();

  int g_tree_get_type() {
    return _g_tree_get_type();
  }

  late final _g_tree_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_tree_get_type');
  late final _g_tree_get_type =
      _g_tree_get_typePtr.asFunction<int Function()>();

  int g_pattern_spec_get_type() {
    return _g_pattern_spec_get_type();
  }

  late final _g_pattern_spec_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_pattern_spec_get_type');
  late final _g_pattern_spec_get_type =
      _g_pattern_spec_get_typePtr.asFunction<int Function()>();

  int g_variant_get_gtype() {
    return _g_variant_get_gtype();
  }

  late final _g_variant_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_get_gtype');
  late final _g_variant_get_gtype =
      _g_variant_get_gtypePtr.asFunction<int Function()>();

  gpointer g_boxed_copy(
    int boxed_type,
    gconstpointer src_boxed,
  ) {
    return _g_boxed_copy(
      boxed_type,
      src_boxed,
    );
  }

  late final _g_boxed_copyPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType, gconstpointer)>>(
          'g_boxed_copy');
  late final _g_boxed_copy =
      _g_boxed_copyPtr.asFunction<gpointer Function(int, gconstpointer)>();

  void g_boxed_free(
    int boxed_type,
    gpointer boxed,
  ) {
    return _g_boxed_free(
      boxed_type,
      boxed,
    );
  }

  late final _g_boxed_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, gpointer)>>(
          'g_boxed_free');
  late final _g_boxed_free =
      _g_boxed_freePtr.asFunction<void Function(int, gpointer)>();

  void g_value_set_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_set_boxed');
  late final _g_value_set_boxed = _g_value_set_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_set_static_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_static_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_static_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_set_static_boxed');
  late final _g_value_set_static_boxed = _g_value_set_static_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_take_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_take_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_take_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_take_boxed');
  late final _g_value_take_boxed = _g_value_take_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_set_boxed_take_ownership(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_boxed_take_ownership(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_boxed_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              gconstpointer)>>('g_value_set_boxed_take_ownership');
  late final _g_value_set_boxed_take_ownership =
      _g_value_set_boxed_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  gpointer g_value_get_boxed(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_boxed(
      value,
    );
  }

  late final _g_value_get_boxedPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_boxed');
  late final _g_value_get_boxed = _g_value_get_boxedPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  gpointer g_value_dup_boxed(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_boxed(
      value,
    );
  }

  late final _g_value_dup_boxedPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_dup_boxed');
  late final _g_value_dup_boxed = _g_value_dup_boxedPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_boxed_type_register_static(
    ffi.Pointer<gchar> name,
    GBoxedCopyFunc boxed_copy,
    GBoxedFreeFunc boxed_free,
  ) {
    return _g_boxed_type_register_static(
      name,
      boxed_copy,
      boxed_free,
    );
  }

  late final _g_boxed_type_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<gchar>, GBoxedCopyFunc,
              GBoxedFreeFunc)>>('g_boxed_type_register_static');
  late final _g_boxed_type_register_static =
      _g_boxed_type_register_staticPtr.asFunction<
          int Function(ffi.Pointer<gchar>, GBoxedCopyFunc, GBoxedFreeFunc)>();

  int g_closure_get_type() {
    return _g_closure_get_type();
  }

  late final _g_closure_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_closure_get_type');
  late final _g_closure_get_type =
      _g_closure_get_typePtr.asFunction<int Function()>();

  int g_value_get_type() {
    return _g_value_get_type();
  }

  late final _g_value_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_value_get_type');
  late final _g_value_get_type =
      _g_value_get_typePtr.asFunction<int Function()>();

  /// GInitiallyUnowned:
  ///
  /// A type for objects that have an initially floating reference.
  ///
  /// All the fields in the `GInitiallyUnowned` structure are private to the
  /// implementation and should never be accessed directly.
  /// /
  /// /**
  /// GInitiallyUnownedClass:
  ///
  /// The class structure for the GInitiallyUnowned type.
  int g_initially_unowned_get_type() {
    return _g_initially_unowned_get_type();
  }

  late final _g_initially_unowned_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_initially_unowned_get_type');
  late final _g_initially_unowned_get_type =
      _g_initially_unowned_get_typePtr.asFunction<int Function()>();

  void g_object_class_install_property(
    ffi.Pointer<GObjectClass> oclass,
    int property_id,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_class_install_property(
      oclass,
      property_id,
      pspec,
    );
  }

  late final _g_object_class_install_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
              ffi.Pointer<GParamSpec>)>>('g_object_class_install_property');
  late final _g_object_class_install_property =
      _g_object_class_install_propertyPtr.asFunction<
          void Function(
              ffi.Pointer<GObjectClass>, int, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_object_class_find_property(
    ffi.Pointer<GObjectClass> oclass,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_object_class_find_property(
      oclass,
      property_name,
    );
  }

  late final _g_object_class_find_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<GObjectClass>,
              ffi.Pointer<gchar>)>>('g_object_class_find_property');
  late final _g_object_class_find_property =
      _g_object_class_find_propertyPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GObjectClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_object_class_list_properties(
    ffi.Pointer<GObjectClass> oclass,
    ffi.Pointer<guint> n_properties,
  ) {
    return _g_object_class_list_properties(
      oclass,
      n_properties,
    );
  }

  late final _g_object_class_list_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GObjectClass>,
              ffi.Pointer<guint>)>>('g_object_class_list_properties');
  late final _g_object_class_list_properties =
      _g_object_class_list_propertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GObjectClass>, ffi.Pointer<guint>)>();

  void g_object_class_override_property(
    ffi.Pointer<GObjectClass> oclass,
    int property_id,
    ffi.Pointer<gchar> name,
  ) {
    return _g_object_class_override_property(
      oclass,
      property_id,
      name,
    );
  }

  late final _g_object_class_override_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
              ffi.Pointer<gchar>)>>('g_object_class_override_property');
  late final _g_object_class_override_property =
      _g_object_class_override_propertyPtr.asFunction<
          void Function(ffi.Pointer<GObjectClass>, int, ffi.Pointer<gchar>)>();

  void g_object_class_install_properties(
    ffi.Pointer<GObjectClass> oclass,
    int n_pspecs,
    ffi.Pointer<ffi.Pointer<GParamSpec>> pspecs,
  ) {
    return _g_object_class_install_properties(
      oclass,
      n_pspecs,
      pspecs,
    );
  }

  late final _g_object_class_install_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
                  ffi.Pointer<ffi.Pointer<GParamSpec>>)>>(
      'g_object_class_install_properties');
  late final _g_object_class_install_properties =
      _g_object_class_install_propertiesPtr.asFunction<
          void Function(ffi.Pointer<GObjectClass>, int,
              ffi.Pointer<ffi.Pointer<GParamSpec>>)>();

  void g_object_interface_install_property(
    gpointer g_iface,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_interface_install_property(
      g_iface,
      pspec,
    );
  }

  late final _g_object_interface_install_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer,
              ffi.Pointer<GParamSpec>)>>('g_object_interface_install_property');
  late final _g_object_interface_install_property =
      _g_object_interface_install_propertyPtr
          .asFunction<void Function(gpointer, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_object_interface_find_property(
    gpointer g_iface,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_object_interface_find_property(
      g_iface,
      property_name,
    );
  }

  late final _g_object_interface_find_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(gpointer,
              ffi.Pointer<gchar>)>>('g_object_interface_find_property');
  late final _g_object_interface_find_property =
      _g_object_interface_find_propertyPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(gpointer, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_object_interface_list_properties(
    gpointer g_iface,
    ffi.Pointer<guint> n_properties_p,
  ) {
    return _g_object_interface_list_properties(
      g_iface,
      n_properties_p,
    );
  }

  late final _g_object_interface_list_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(gpointer,
              ffi.Pointer<guint>)>>('g_object_interface_list_properties');
  late final _g_object_interface_list_properties =
      _g_object_interface_list_propertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              gpointer, ffi.Pointer<guint>)>();

  int g_object_get_type() {
    return _g_object_get_type();
  }

  late final _g_object_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_object_get_type');
  late final _g_object_get_type =
      _g_object_get_typePtr.asFunction<int Function()>();

  gpointer g_object_new(
    int object_type,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_object_new(
      object_type,
      first_property_name,
    );
  }

  late final _g_object_newPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType, ffi.Pointer<gchar>)>>(
          'g_object_new');
  late final _g_object_new =
      _g_object_newPtr.asFunction<gpointer Function(int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GObject> g_object_new_with_properties(
    int object_type,
    int n_properties,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_new_with_properties(
      object_type,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_new_with_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              GType,
              guint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GValue>)>>('g_object_new_with_properties');
  late final _g_object_new_with_properties =
      _g_object_new_with_propertiesPtr.asFunction<
          ffi.Pointer<GObject> Function(int, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>();

  gpointer g_object_newv(
    int object_type,
    int n_parameters,
    ffi.Pointer<GParameter> parameters,
  ) {
    return _g_object_newv(
      object_type,
      n_parameters,
      parameters,
    );
  }

  late final _g_object_newvPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              GType, guint, ffi.Pointer<GParameter>)>>('g_object_newv');
  late final _g_object_newv = _g_object_newvPtr
      .asFunction<gpointer Function(int, int, ffi.Pointer<GParameter>)>();

  ffi.Pointer<GObject> g_object_new_valist(
    int object_type,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_new_valist(
      object_type,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(GType, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_object_new_valist');
  late final _g_object_new_valist = _g_object_new_valistPtr.asFunction<
      ffi.Pointer<GObject> Function(
          int, ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>)>();

  void g_object_set(
    gpointer object,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_object_set(
      object,
      first_property_name,
    );
  }

  late final _g_object_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_set');
  late final _g_object_set = _g_object_setPtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  void g_object_get(
    gpointer object,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_object_get(
      object,
      first_property_name,
    );
  }

  late final _g_object_getPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_get');
  late final _g_object_get = _g_object_getPtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  gpointer g_object_connect(
    gpointer object,
    ffi.Pointer<gchar> signal_spec,
  ) {
    return _g_object_connect(
      object,
      signal_spec,
    );
  }

  late final _g_object_connectPtr = _lookup<
          ffi.NativeFunction<gpointer Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_connect');
  late final _g_object_connect = _g_object_connectPtr
      .asFunction<gpointer Function(gpointer, ffi.Pointer<gchar>)>();

  void g_object_disconnect(
    gpointer object,
    ffi.Pointer<gchar> signal_spec,
  ) {
    return _g_object_disconnect(
      object,
      signal_spec,
    );
  }

  late final _g_object_disconnectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_disconnect');
  late final _g_object_disconnect = _g_object_disconnectPtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  void g_object_setv(
    ffi.Pointer<GObject> object,
    int n_properties,
    ffi.Pointer<ffi.Pointer<gchar>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_setv(
      object,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_setvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>,
              guint,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<GValue>)>>('g_object_setv');
  late final _g_object_setv = _g_object_setvPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int, ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<GValue>)>();

  void g_object_set_valist(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_set_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_set_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_object_set_valist');
  late final _g_object_set_valist = _g_object_set_valistPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  void g_object_getv(
    ffi.Pointer<GObject> object,
    int n_properties,
    ffi.Pointer<ffi.Pointer<gchar>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_getv(
      object,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_getvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>,
              guint,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<GValue>)>>('g_object_getv');
  late final _g_object_getv = _g_object_getvPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int, ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<GValue>)>();

  void g_object_get_valist(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_get_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_get_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_object_get_valist');
  late final _g_object_get_valist = _g_object_get_valistPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  void g_object_set_property(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<GValue> value,
  ) {
    return _g_object_set_property(
      object,
      property_name,
      value,
    );
  }

  late final _g_object_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<GValue>)>>('g_object_set_property');
  late final _g_object_set_property = _g_object_set_propertyPtr.asFunction<
      void Function(
          ffi.Pointer<GObject>, ffi.Pointer<gchar>, ffi.Pointer<GValue>)>();

  void g_object_get_property(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<GValue> value,
  ) {
    return _g_object_get_property(
      object,
      property_name,
      value,
    );
  }

  late final _g_object_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<GValue>)>>('g_object_get_property');
  late final _g_object_get_property = _g_object_get_propertyPtr.asFunction<
      void Function(
          ffi.Pointer<GObject>, ffi.Pointer<gchar>, ffi.Pointer<GValue>)>();

  void g_object_freeze_notify(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_freeze_notify(
      object,
    );
  }

  late final _g_object_freeze_notifyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_freeze_notify');
  late final _g_object_freeze_notify = _g_object_freeze_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_object_notify(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_object_notify(
      object,
      property_name,
    );
  }

  late final _g_object_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>, ffi.Pointer<gchar>)>>('g_object_notify');
  late final _g_object_notify = _g_object_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>)>();

  void g_object_notify_by_pspec(
    ffi.Pointer<GObject> object,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_notify_by_pspec(
      object,
      pspec,
    );
  }

  late final _g_object_notify_by_pspecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<GParamSpec>)>>('g_object_notify_by_pspec');
  late final _g_object_notify_by_pspec =
      _g_object_notify_by_pspecPtr.asFunction<
          void Function(ffi.Pointer<GObject>, ffi.Pointer<GParamSpec>)>();

  void g_object_thaw_notify(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_thaw_notify(
      object,
    );
  }

  late final _g_object_thaw_notifyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_thaw_notify');
  late final _g_object_thaw_notify = _g_object_thaw_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  int g_object_is_floating(
    gpointer object,
  ) {
    return _g_object_is_floating(
      object,
    );
  }

  late final _g_object_is_floatingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gpointer)>>(
          'g_object_is_floating');
  late final _g_object_is_floating =
      _g_object_is_floatingPtr.asFunction<int Function(gpointer)>();

  gpointer g_object_ref_sink(
    gpointer object,
  ) {
    return _g_object_ref_sink(
      object,
    );
  }

  late final _g_object_ref_sinkPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_object_ref_sink');
  late final _g_object_ref_sink =
      _g_object_ref_sinkPtr.asFunction<gpointer Function(gpointer)>();

  gpointer g_object_take_ref(
    gpointer object,
  ) {
    return _g_object_take_ref(
      object,
    );
  }

  late final _g_object_take_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_object_take_ref');
  late final _g_object_take_ref =
      _g_object_take_refPtr.asFunction<gpointer Function(gpointer)>();

  gpointer g_object_ref(
    gpointer object,
  ) {
    return _g_object_ref(
      object,
    );
  }

  late final _g_object_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>('g_object_ref');
  late final _g_object_ref =
      _g_object_refPtr.asFunction<gpointer Function(gpointer)>();

  void g_object_unref(
    gpointer object,
  ) {
    return _g_object_unref(
      object,
    );
  }

  late final _g_object_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_object_unref');
  late final _g_object_unref =
      _g_object_unrefPtr.asFunction<void Function(gpointer)>();

  void g_object_weak_ref(
    ffi.Pointer<GObject> object,
    GWeakNotify notify,
    gpointer data,
  ) {
    return _g_object_weak_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_weak_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GWeakNotify,
              gpointer)>>('g_object_weak_ref');
  late final _g_object_weak_ref = _g_object_weak_refPtr
      .asFunction<void Function(ffi.Pointer<GObject>, GWeakNotify, gpointer)>();

  void g_object_weak_unref(
    ffi.Pointer<GObject> object,
    GWeakNotify notify,
    gpointer data,
  ) {
    return _g_object_weak_unref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_weak_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GWeakNotify,
              gpointer)>>('g_object_weak_unref');
  late final _g_object_weak_unref = _g_object_weak_unrefPtr
      .asFunction<void Function(ffi.Pointer<GObject>, GWeakNotify, gpointer)>();

  void g_object_add_weak_pointer(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gpointer> weak_pointer_location,
  ) {
    return _g_object_add_weak_pointer(
      object,
      weak_pointer_location,
    );
  }

  late final _g_object_add_weak_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<gpointer>)>>('g_object_add_weak_pointer');
  late final _g_object_add_weak_pointer = _g_object_add_weak_pointerPtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<gpointer>)>();

  void g_object_remove_weak_pointer(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gpointer> weak_pointer_location,
  ) {
    return _g_object_remove_weak_pointer(
      object,
      weak_pointer_location,
    );
  }

  late final _g_object_remove_weak_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<gpointer>)>>('g_object_remove_weak_pointer');
  late final _g_object_remove_weak_pointer = _g_object_remove_weak_pointerPtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<gpointer>)>();

  void g_object_add_toggle_ref(
    ffi.Pointer<GObject> object,
    GToggleNotify notify,
    gpointer data,
  ) {
    return _g_object_add_toggle_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_add_toggle_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GToggleNotify,
              gpointer)>>('g_object_add_toggle_ref');
  late final _g_object_add_toggle_ref = _g_object_add_toggle_refPtr.asFunction<
      void Function(ffi.Pointer<GObject>, GToggleNotify, gpointer)>();

  void g_object_remove_toggle_ref(
    ffi.Pointer<GObject> object,
    GToggleNotify notify,
    gpointer data,
  ) {
    return _g_object_remove_toggle_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_remove_toggle_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GToggleNotify,
              gpointer)>>('g_object_remove_toggle_ref');
  late final _g_object_remove_toggle_ref =
      _g_object_remove_toggle_refPtr.asFunction<
          void Function(ffi.Pointer<GObject>, GToggleNotify, gpointer)>();

  gpointer g_object_get_qdata(
    ffi.Pointer<GObject> object,
    int quark,
  ) {
    return _g_object_get_qdata(
      object,
      quark,
    );
  }

  late final _g_object_get_qdataPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GObject>, GQuark)>>(
      'g_object_get_qdata');
  late final _g_object_get_qdata = _g_object_get_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GObject>, int)>();

  void g_object_set_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    gpointer data,
  ) {
    return _g_object_set_qdata(
      object,
      quark,
      data,
    );
  }

  late final _g_object_set_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>, GQuark, gpointer)>>('g_object_set_qdata');
  late final _g_object_set_qdata = _g_object_set_qdataPtr
      .asFunction<void Function(ffi.Pointer<GObject>, int, gpointer)>();

  void g_object_set_qdata_full(
    ffi.Pointer<GObject> object,
    int quark,
    gpointer data,
    GDestroyNotify destroy,
  ) {
    return _g_object_set_qdata_full(
      object,
      quark,
      data,
      destroy,
    );
  }

  late final _g_object_set_qdata_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GQuark, gpointer,
              GDestroyNotify)>>('g_object_set_qdata_full');
  late final _g_object_set_qdata_full = _g_object_set_qdata_fullPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int, gpointer, GDestroyNotify)>();

  gpointer g_object_steal_qdata(
    ffi.Pointer<GObject> object,
    int quark,
  ) {
    return _g_object_steal_qdata(
      object,
      quark,
    );
  }

  late final _g_object_steal_qdataPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GObject>, GQuark)>>(
      'g_object_steal_qdata');
  late final _g_object_steal_qdata = _g_object_steal_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GObject>, int)>();

  gpointer g_object_dup_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    GDuplicateFunc dup_func,
    gpointer user_data,
  ) {
    return _g_object_dup_qdata(
      object,
      quark,
      dup_func,
      user_data,
    );
  }

  late final _g_object_dup_qdataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GObject>, GQuark, GDuplicateFunc,
              gpointer)>>('g_object_dup_qdata');
  late final _g_object_dup_qdata = _g_object_dup_qdataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, int, GDuplicateFunc, gpointer)>();

  int g_object_replace_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    gpointer oldval,
    gpointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_object_replace_qdata(
      object,
      quark,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_object_replace_qdataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GObject>,
              GQuark,
              gpointer,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_object_replace_qdata');
  late final _g_object_replace_qdata = _g_object_replace_qdataPtr.asFunction<
      int Function(ffi.Pointer<GObject>, int, gpointer, gpointer,
          GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  gpointer g_object_get_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
  ) {
    return _g_object_get_data(
      object,
      key,
    );
  }

  late final _g_object_get_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GObject>, ffi.Pointer<gchar>)>>('g_object_get_data');
  late final _g_object_get_data = _g_object_get_dataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>)>();

  void g_object_set_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    gpointer data,
  ) {
    return _g_object_set_data(
      object,
      key,
      data,
    );
  }

  late final _g_object_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              gpointer)>>('g_object_set_data');
  late final _g_object_set_data = _g_object_set_dataPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer)>();

  void g_object_set_data_full(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    gpointer data,
    GDestroyNotify destroy,
  ) {
    return _g_object_set_data_full(
      object,
      key,
      data,
      destroy,
    );
  }

  late final _g_object_set_data_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer,
              GDestroyNotify)>>('g_object_set_data_full');
  late final _g_object_set_data_full = _g_object_set_data_fullPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer,
          GDestroyNotify)>();

  gpointer g_object_steal_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
  ) {
    return _g_object_steal_data(
      object,
      key,
    );
  }

  late final _g_object_steal_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GObject>,
              ffi.Pointer<gchar>)>>('g_object_steal_data');
  late final _g_object_steal_data = _g_object_steal_dataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>)>();

  gpointer g_object_dup_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    GDuplicateFunc dup_func,
    gpointer user_data,
  ) {
    return _g_object_dup_data(
      object,
      key,
      dup_func,
      user_data,
    );
  }

  late final _g_object_dup_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              GDuplicateFunc, gpointer)>>('g_object_dup_data');
  late final _g_object_dup_data = _g_object_dup_dataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
          GDuplicateFunc, gpointer)>();

  int g_object_replace_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    gpointer oldval,
    gpointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_object_replace_data(
      object,
      key,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_object_replace_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GObject>,
              ffi.Pointer<gchar>,
              gpointer,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_object_replace_data');
  late final _g_object_replace_data = _g_object_replace_dataPtr.asFunction<
      int Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer, gpointer,
          GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  void g_object_watch_closure(
    ffi.Pointer<GObject> object,
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_object_watch_closure(
      object,
      closure,
    );
  }

  late final _g_object_watch_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<GClosure>)>>('g_object_watch_closure');
  late final _g_object_watch_closure = _g_object_watch_closurePtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<GClosure>)>();

  ffi.Pointer<GClosure> g_cclosure_new_object(
    GCallback callback_func,
    ffi.Pointer<GObject> object,
  ) {
    return _g_cclosure_new_object(
      callback_func,
      object,
    );
  }

  late final _g_cclosure_new_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer<GObject>)>>('g_cclosure_new_object');
  late final _g_cclosure_new_object = _g_cclosure_new_objectPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer<GObject>)>();

  ffi.Pointer<GClosure> g_cclosure_new_object_swap(
    GCallback callback_func,
    ffi.Pointer<GObject> object,
  ) {
    return _g_cclosure_new_object_swap(
      callback_func,
      object,
    );
  }

  late final _g_cclosure_new_object_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer<GObject>)>>('g_cclosure_new_object_swap');
  late final _g_cclosure_new_object_swap =
      _g_cclosure_new_object_swapPtr.asFunction<
          ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer<GObject>)>();

  ffi.Pointer<GClosure> g_closure_new_object(
    int sizeof_closure,
    ffi.Pointer<GObject> object,
  ) {
    return _g_closure_new_object(
      sizeof_closure,
      object,
    );
  }

  late final _g_closure_new_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              guint, ffi.Pointer<GObject>)>>('g_closure_new_object');
  late final _g_closure_new_object = _g_closure_new_objectPtr
      .asFunction<ffi.Pointer<GClosure> Function(int, ffi.Pointer<GObject>)>();

  void g_value_set_object(
    ffi.Pointer<GValue> value,
    gpointer v_object,
  ) {
    return _g_value_set_object(
      value,
      v_object,
    );
  }

  late final _g_value_set_objectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_object');
  late final _g_value_set_object = _g_value_set_objectPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  gpointer g_value_get_object(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_object(
      value,
    );
  }

  late final _g_value_get_objectPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_object');
  late final _g_value_get_object = _g_value_get_objectPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  gpointer g_value_dup_object(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_object(
      value,
    );
  }

  late final _g_value_dup_objectPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_dup_object');
  late final _g_value_dup_object = _g_value_dup_objectPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_signal_connect_object(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer gobject,
    int connect_flags,
  ) {
    return _g_signal_connect_object(
      instance,
      detailed_signal,
      c_handler,
      gobject,
      connect_flags,
    );
  }

  late final _g_signal_connect_objectPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer,
              ffi.Int32)>>('g_signal_connect_object');
  late final _g_signal_connect_object = _g_signal_connect_objectPtr.asFunction<
      int Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer, int)>();

  void g_object_force_floating(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_force_floating(
      object,
    );
  }

  late final _g_object_force_floatingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_force_floating');
  late final _g_object_force_floating = _g_object_force_floatingPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_object_run_dispose(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_run_dispose(
      object,
    );
  }

  late final _g_object_run_disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_run_dispose');
  late final _g_object_run_dispose = _g_object_run_disposePtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_value_take_object(
    ffi.Pointer<GValue> value,
    gpointer v_object,
  ) {
    return _g_value_take_object(
      value,
      v_object,
    );
  }

  late final _g_value_take_objectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_take_object');
  late final _g_value_take_object = _g_value_take_objectPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  void g_value_set_object_take_ownership(
    ffi.Pointer<GValue> value,
    gpointer v_object,
  ) {
    return _g_value_set_object_take_ownership(
      value,
      v_object,
    );
  }

  late final _g_value_set_object_take_ownershipPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_object_take_ownership');
  late final _g_value_set_object_take_ownership =
      _g_value_set_object_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  int g_object_compat_control(
    int what,
    gpointer data,
  ) {
    return _g_object_compat_control(
      what,
      data,
    );
  }

  late final _g_object_compat_controlPtr =
      _lookup<ffi.NativeFunction<gsize Function(gsize, gpointer)>>(
          'g_object_compat_control');
  late final _g_object_compat_control =
      _g_object_compat_controlPtr.asFunction<int Function(int, gpointer)>();

  void g_clear_object(
    ffi.Pointer<ffi.Pointer<GObject>> object_ptr,
  ) {
    return _g_clear_object(
      object_ptr,
    );
  }

  late final _g_clear_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GObject>>)>>('g_clear_object');
  late final _g_clear_object = _g_clear_objectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GObject>>)>();

  void g_weak_ref_init(
    ffi.Pointer<GWeakRef> weak_ref,
    gpointer object,
  ) {
    return _g_weak_ref_init(
      weak_ref,
      object,
    );
  }

  late final _g_weak_ref_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GWeakRef>, gpointer)>>('g_weak_ref_init');
  late final _g_weak_ref_init = _g_weak_ref_initPtr
      .asFunction<void Function(ffi.Pointer<GWeakRef>, gpointer)>();

  void g_weak_ref_clear(
    ffi.Pointer<GWeakRef> weak_ref,
  ) {
    return _g_weak_ref_clear(
      weak_ref,
    );
  }

  late final _g_weak_ref_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GWeakRef>)>>(
          'g_weak_ref_clear');
  late final _g_weak_ref_clear =
      _g_weak_ref_clearPtr.asFunction<void Function(ffi.Pointer<GWeakRef>)>();

  gpointer g_weak_ref_get(
    ffi.Pointer<GWeakRef> weak_ref,
  ) {
    return _g_weak_ref_get(
      weak_ref,
    );
  }

  late final _g_weak_ref_getPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GWeakRef>)>>(
          'g_weak_ref_get');
  late final _g_weak_ref_get =
      _g_weak_ref_getPtr.asFunction<gpointer Function(ffi.Pointer<GWeakRef>)>();

  void g_weak_ref_set(
    ffi.Pointer<GWeakRef> weak_ref,
    gpointer object,
  ) {
    return _g_weak_ref_set(
      weak_ref,
      object,
    );
  }

  late final _g_weak_ref_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GWeakRef>, gpointer)>>('g_weak_ref_set');
  late final _g_weak_ref_set = _g_weak_ref_setPtr
      .asFunction<void Function(ffi.Pointer<GWeakRef>, gpointer)>();

  int g_binding_flags_get_type() {
    return _g_binding_flags_get_type();
  }

  late final _g_binding_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_flags_get_type');
  late final _g_binding_flags_get_type =
      _g_binding_flags_get_typePtr.asFunction<int Function()>();

  int g_binding_get_type() {
    return _g_binding_get_type();
  }

  late final _g_binding_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_get_type');
  late final _g_binding_get_type =
      _g_binding_get_typePtr.asFunction<int Function()>();

  int g_binding_get_flags(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_flags(
      binding,
    );
  }

  late final _g_binding_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GBinding>)>>(
          'g_binding_get_flags');
  late final _g_binding_get_flags =
      _g_binding_get_flagsPtr.asFunction<int Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_get_source(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_source(
      binding,
    );
  }

  late final _g_binding_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_source');
  late final _g_binding_get_source = _g_binding_get_sourcePtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_dup_source(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_dup_source(
      binding,
    );
  }

  late final _g_binding_dup_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_dup_source');
  late final _g_binding_dup_source = _g_binding_dup_sourcePtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_get_target(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_target(
      binding,
    );
  }

  late final _g_binding_get_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_target');
  late final _g_binding_get_target = _g_binding_get_targetPtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_dup_target(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_dup_target(
      binding,
    );
  }

  late final _g_binding_dup_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_dup_target');
  late final _g_binding_dup_target = _g_binding_dup_targetPtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<gchar> g_binding_get_source_property(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_source_property(
      binding,
    );
  }

  late final _g_binding_get_source_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_source_property');
  late final _g_binding_get_source_property = _g_binding_get_source_propertyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<gchar> g_binding_get_target_property(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_target_property(
      binding,
    );
  }

  late final _g_binding_get_target_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_target_property');
  late final _g_binding_get_target_property = _g_binding_get_target_propertyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GBinding>)>();

  void g_binding_unbind(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_unbind(
      binding,
    );
  }

  late final _g_binding_unbindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBinding>)>>(
          'g_binding_unbind');
  late final _g_binding_unbind =
      _g_binding_unbindPtr.asFunction<void Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GBinding> g_object_bind_property(
    gpointer source,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
  ) {
    return _g_object_bind_property(
      source,
      source_property,
      target,
      target_property,
      flags,
    );
  }

  late final _g_object_bind_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(gpointer, ffi.Pointer<gchar>, gpointer,
              ffi.Pointer<gchar>, ffi.Int32)>>('g_object_bind_property');
  late final _g_object_bind_property = _g_object_bind_propertyPtr.asFunction<
      ffi.Pointer<GBinding> Function(
          gpointer, ffi.Pointer<gchar>, gpointer, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GBinding> g_object_bind_property_full(
    gpointer source,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    GBindingTransformFunc transform_to,
    GBindingTransformFunc transform_from,
    gpointer user_data,
    GDestroyNotify notify,
  ) {
    return _g_object_bind_property_full(
      source,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
      user_data,
      notify,
    );
  }

  late final _g_object_bind_property_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>>('g_object_bind_property_full');
  late final _g_object_bind_property_full =
      _g_object_bind_property_fullPtr.asFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>();

  ffi.Pointer<GBinding> g_object_bind_property_with_closures(
    gpointer source,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    ffi.Pointer<GClosure> transform_to,
    ffi.Pointer<GClosure> transform_from,
  ) {
    return _g_object_bind_property_with_closures(
      source,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
    );
  }

  late final _g_object_bind_property_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_object_bind_property_with_closures');
  late final _g_object_bind_property_with_closures =
      _g_object_bind_property_with_closuresPtr.asFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>();

  int g_binding_group_get_type() {
    return _g_binding_group_get_type();
  }

  late final _g_binding_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_group_get_type');
  late final _g_binding_group_get_type =
      _g_binding_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GBindingGroup> g_binding_group_new() {
    return _g_binding_group_new();
  }

  late final _g_binding_group_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GBindingGroup> Function()>>(
          'g_binding_group_new');
  late final _g_binding_group_new = _g_binding_group_newPtr
      .asFunction<ffi.Pointer<GBindingGroup> Function()>();

  gpointer g_binding_group_dup_source(
    ffi.Pointer<GBindingGroup> self,
  ) {
    return _g_binding_group_dup_source(
      self,
    );
  }

  late final _g_binding_group_dup_sourcePtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GBindingGroup>)>>(
      'g_binding_group_dup_source');
  late final _g_binding_group_dup_source = _g_binding_group_dup_sourcePtr
      .asFunction<gpointer Function(ffi.Pointer<GBindingGroup>)>();

  void g_binding_group_set_source(
    ffi.Pointer<GBindingGroup> self,
    gpointer source,
  ) {
    return _g_binding_group_set_source(
      self,
      source,
    );
  }

  late final _g_binding_group_set_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBindingGroup>,
              gpointer)>>('g_binding_group_set_source');
  late final _g_binding_group_set_source = _g_binding_group_set_sourcePtr
      .asFunction<void Function(ffi.Pointer<GBindingGroup>, gpointer)>();

  void g_binding_group_bind(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
  ) {
    return _g_binding_group_bind(
      self,
      source_property,
      target,
      target_property,
      flags,
    );
  }

  late final _g_binding_group_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32)>>('g_binding_group_bind');
  late final _g_binding_group_bind = _g_binding_group_bindPtr.asFunction<
      void Function(ffi.Pointer<GBindingGroup>, ffi.Pointer<gchar>, gpointer,
          ffi.Pointer<gchar>, int)>();

  void g_binding_group_bind_full(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    GBindingTransformFunc transform_to,
    GBindingTransformFunc transform_from,
    gpointer user_data,
    GDestroyNotify user_data_destroy,
  ) {
    return _g_binding_group_bind_full(
      self,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
      user_data,
      user_data_destroy,
    );
  }

  late final _g_binding_group_bind_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>>('g_binding_group_bind_full');
  late final _g_binding_group_bind_full =
      _g_binding_group_bind_fullPtr.asFunction<
          void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>();

  void g_binding_group_bind_with_closures(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    ffi.Pointer<GClosure> transform_to,
    ffi.Pointer<GClosure> transform_from,
  ) {
    return _g_binding_group_bind_with_closures(
      self,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
    );
  }

  late final _g_binding_group_bind_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_binding_group_bind_with_closures');
  late final _g_binding_group_bind_with_closures =
      _g_binding_group_bind_with_closuresPtr.asFunction<
          void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>();

  ffi.Pointer<GEnumValue> g_enum_get_value(
    ffi.Pointer<GEnumClass> enum_class,
    int value,
  ) {
    return _g_enum_get_value(
      enum_class,
      value,
    );
  }

  late final _g_enum_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, gint)>>('g_enum_get_value');
  late final _g_enum_get_value = _g_enum_get_valuePtr.asFunction<
      ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>, int)>();

  ffi.Pointer<GEnumValue> g_enum_get_value_by_name(
    ffi.Pointer<GEnumClass> enum_class,
    ffi.Pointer<gchar> name,
  ) {
    return _g_enum_get_value_by_name(
      enum_class,
      name,
    );
  }

  late final _g_enum_get_value_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>,
              ffi.Pointer<gchar>)>>('g_enum_get_value_by_name');
  late final _g_enum_get_value_by_name =
      _g_enum_get_value_by_namePtr.asFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GEnumValue> g_enum_get_value_by_nick(
    ffi.Pointer<GEnumClass> enum_class,
    ffi.Pointer<gchar> nick,
  ) {
    return _g_enum_get_value_by_nick(
      enum_class,
      nick,
    );
  }

  late final _g_enum_get_value_by_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>,
              ffi.Pointer<gchar>)>>('g_enum_get_value_by_nick');
  late final _g_enum_get_value_by_nick =
      _g_enum_get_value_by_nickPtr.asFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GFlagsValue> g_flags_get_first_value(
    ffi.Pointer<GFlagsClass> flags_class,
    int value,
  ) {
    return _g_flags_get_first_value(
      flags_class,
      value,
    );
  }

  late final _g_flags_get_first_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, guint)>>('g_flags_get_first_value');
  late final _g_flags_get_first_value = _g_flags_get_first_valuePtr.asFunction<
      ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>, int)>();

  ffi.Pointer<GFlagsValue> g_flags_get_value_by_name(
    ffi.Pointer<GFlagsClass> flags_class,
    ffi.Pointer<gchar> name,
  ) {
    return _g_flags_get_value_by_name(
      flags_class,
      name,
    );
  }

  late final _g_flags_get_value_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>,
              ffi.Pointer<gchar>)>>('g_flags_get_value_by_name');
  late final _g_flags_get_value_by_name =
      _g_flags_get_value_by_namePtr.asFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GFlagsValue> g_flags_get_value_by_nick(
    ffi.Pointer<GFlagsClass> flags_class,
    ffi.Pointer<gchar> nick,
  ) {
    return _g_flags_get_value_by_nick(
      flags_class,
      nick,
    );
  }

  late final _g_flags_get_value_by_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>,
              ffi.Pointer<gchar>)>>('g_flags_get_value_by_nick');
  late final _g_flags_get_value_by_nick =
      _g_flags_get_value_by_nickPtr.asFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_enum_to_string(
    int g_enum_type,
    int value,
  ) {
    return _g_enum_to_string(
      g_enum_type,
      value,
    );
  }

  late final _g_enum_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(GType, gint)>>(
          'g_enum_to_string');
  late final _g_enum_to_string =
      _g_enum_to_stringPtr.asFunction<ffi.Pointer<gchar> Function(int, int)>();

  ffi.Pointer<gchar> g_flags_to_string(
    int flags_type,
    int value,
  ) {
    return _g_flags_to_string(
      flags_type,
      value,
    );
  }

  late final _g_flags_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(GType, guint)>>(
          'g_flags_to_string');
  late final _g_flags_to_string =
      _g_flags_to_stringPtr.asFunction<ffi.Pointer<gchar> Function(int, int)>();

  void g_value_set_enum(
    ffi.Pointer<GValue> value,
    int v_enum,
  ) {
    return _g_value_set_enum(
      value,
      v_enum,
    );
  }

  late final _g_value_set_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint)>>(
          'g_value_set_enum');
  late final _g_value_set_enum = _g_value_set_enumPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_enum(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_enum(
      value,
    );
  }

  late final _g_value_get_enumPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_enum');
  late final _g_value_get_enum =
      _g_value_get_enumPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_flags(
    ffi.Pointer<GValue> value,
    int v_flags,
  ) {
    return _g_value_set_flags(
      value,
      v_flags,
    );
  }

  late final _g_value_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint)>>(
      'g_value_set_flags');
  late final _g_value_set_flags = _g_value_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_flags(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_flags(
      value,
    );
  }

  late final _g_value_get_flagsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_flags');
  late final _g_value_get_flags =
      _g_value_get_flagsPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  int g_enum_register_static(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GEnumValue> const_static_values,
  ) {
    return _g_enum_register_static(
      name,
      const_static_values,
    );
  }

  late final _g_enum_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<gchar>,
              ffi.Pointer<GEnumValue>)>>('g_enum_register_static');
  late final _g_enum_register_static = _g_enum_register_staticPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<GEnumValue>)>();

  int g_flags_register_static(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GFlagsValue> const_static_values,
  ) {
    return _g_flags_register_static(
      name,
      const_static_values,
    );
  }

  late final _g_flags_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<gchar>,
              ffi.Pointer<GFlagsValue>)>>('g_flags_register_static');
  late final _g_flags_register_static = _g_flags_register_staticPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<GFlagsValue>)>();

  void g_enum_complete_type_info(
    int g_enum_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GEnumValue> const_values,
  ) {
    return _g_enum_complete_type_info(
      g_enum_type,
      info,
      const_values,
    );
  }

  late final _g_enum_complete_type_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GEnumValue>)>>('g_enum_complete_type_info');
  late final _g_enum_complete_type_info =
      _g_enum_complete_type_infoPtr.asFunction<
          void Function(
              int, ffi.Pointer<GTypeInfo>, ffi.Pointer<GEnumValue>)>();

  void g_flags_complete_type_info(
    int g_flags_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GFlagsValue> const_values,
  ) {
    return _g_flags_complete_type_info(
      g_flags_type,
      info,
      const_values,
    );
  }

  late final _g_flags_complete_type_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GFlagsValue>)>>('g_flags_complete_type_info');
  late final _g_flags_complete_type_info =
      _g_flags_complete_type_infoPtr.asFunction<
          void Function(
              int, ffi.Pointer<GTypeInfo>, ffi.Pointer<GFlagsValue>)>();

  int g_unicode_type_get_type() {
    return _g_unicode_type_get_type();
  }

  late final _g_unicode_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_unicode_type_get_type');
  late final _g_unicode_type_get_type =
      _g_unicode_type_get_typePtr.asFunction<int Function()>();

  int g_unicode_break_type_get_type() {
    return _g_unicode_break_type_get_type();
  }

  late final _g_unicode_break_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_unicode_break_type_get_type');
  late final _g_unicode_break_type_get_type =
      _g_unicode_break_type_get_typePtr.asFunction<int Function()>();

  int g_unicode_script_get_type() {
    return _g_unicode_script_get_type();
  }

  late final _g_unicode_script_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_unicode_script_get_type');
  late final _g_unicode_script_get_type =
      _g_unicode_script_get_typePtr.asFunction<int Function()>();

  int g_normalize_mode_get_type() {
    return _g_normalize_mode_get_type();
  }

  late final _g_normalize_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_normalize_mode_get_type');
  late final _g_normalize_mode_get_type =
      _g_normalize_mode_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GParamSpec> g_param_spec_char(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_char(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint8,
              gint8,
              gint8,
              ffi.Int32)>>('g_param_spec_char');
  late final _g_param_spec_char = _g_param_spec_charPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uchar(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uchar(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              guint8,
              guint8,
              guint8,
              ffi.Int32)>>('g_param_spec_uchar');
  late final _g_param_spec_uchar = _g_param_spec_ucharPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_boolean(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_boolean(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gboolean,
              ffi.Int32)>>('g_param_spec_boolean');
  late final _g_param_spec_boolean = _g_param_spec_booleanPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_int(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_int(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint,
              gint,
              gint,
              ffi.Int32)>>('g_param_spec_int');
  late final _g_param_spec_int = _g_param_spec_intPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uint(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uint(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              guint,
              guint,
              guint,
              ffi.Int32)>>('g_param_spec_uint');
  late final _g_param_spec_uint = _g_param_spec_uintPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_long(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_long(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              glong,
              glong,
              glong,
              ffi.Int32)>>('g_param_spec_long');
  late final _g_param_spec_long = _g_param_spec_longPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_ulong(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_ulong(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gulong,
              gulong,
              gulong,
              ffi.Int32)>>('g_param_spec_ulong');
  late final _g_param_spec_ulong = _g_param_spec_ulongPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_int64(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_int64(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint64,
              gint64,
              gint64,
              ffi.Int32)>>('g_param_spec_int64');
  late final _g_param_spec_int64 = _g_param_spec_int64Ptr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uint64(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uint64(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              guint64,
              guint64,
              guint64,
              ffi.Int32)>>('g_param_spec_uint64');
  late final _g_param_spec_uint64 = _g_param_spec_uint64Ptr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_unichar(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_unichar(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gunichar,
              ffi.Int32)>>('g_param_spec_unichar');
  late final _g_param_spec_unichar = _g_param_spec_unicharPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_enum(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int enum_type,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_enum(
      name,
      nick,
      blurb,
      enum_type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_enumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              gint,
              ffi.Int32)>>('g_param_spec_enum');
  late final _g_param_spec_enum = _g_param_spec_enumPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_flags(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int flags_type,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_flags(
      name,
      nick,
      blurb,
      flags_type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              guint,
              ffi.Int32)>>('g_param_spec_flags');
  late final _g_param_spec_flags = _g_param_spec_flagsPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_float(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    double minimum,
    double maximum,
    double default_value,
    int flags,
  ) {
    return _g_param_spec_float(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gfloat,
              gfloat,
              gfloat,
              ffi.Int32)>>('g_param_spec_float');
  late final _g_param_spec_float = _g_param_spec_floatPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, double, double, double, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_double(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    double minimum,
    double maximum,
    double default_value,
    int flags,
  ) {
    return _g_param_spec_double(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gdouble,
              gdouble,
              gdouble,
              ffi.Int32)>>('g_param_spec_double');
  late final _g_param_spec_double = _g_param_spec_doublePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, double, double, double, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_string(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    ffi.Pointer<gchar> default_value,
    int flags,
  ) {
    return _g_param_spec_string(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Int32)>>('g_param_spec_string');
  late final _g_param_spec_string = _g_param_spec_stringPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_param(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int param_type,
    int flags,
  ) {
    return _g_param_spec_param(
      name,
      nick,
      blurb,
      param_type,
      flags,
    );
  }

  late final _g_param_spec_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_param');
  late final _g_param_spec_param = _g_param_spec_paramPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_boxed(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int boxed_type,
    int flags,
  ) {
    return _g_param_spec_boxed(
      name,
      nick,
      blurb,
      boxed_type,
      flags,
    );
  }

  late final _g_param_spec_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_boxed');
  late final _g_param_spec_boxed = _g_param_spec_boxedPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_pointer(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int flags,
  ) {
    return _g_param_spec_pointer(
      name,
      nick,
      blurb,
      flags,
    );
  }

  late final _g_param_spec_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Int32)>>('g_param_spec_pointer');
  late final _g_param_spec_pointer = _g_param_spec_pointerPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_value_array(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    ffi.Pointer<GParamSpec> element_spec,
    int flags,
  ) {
    return _g_param_spec_value_array(
      name,
      nick,
      blurb,
      element_spec,
      flags,
    );
  }

  late final _g_param_spec_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GParamSpec>,
              ffi.Int32)>>('g_param_spec_value_array');
  late final _g_param_spec_value_array =
      _g_param_spec_value_arrayPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GParamSpec>,
              int)>();

  ffi.Pointer<GParamSpec> g_param_spec_object(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int object_type,
    int flags,
  ) {
    return _g_param_spec_object(
      name,
      nick,
      blurb,
      object_type,
      flags,
    );
  }

  late final _g_param_spec_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_object');
  late final _g_param_spec_object = _g_param_spec_objectPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_override(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GParamSpec> overridden,
  ) {
    return _g_param_spec_override(
      name,
      overridden,
    );
  }

  late final _g_param_spec_overridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GParamSpec>)>>('g_param_spec_override');
  late final _g_param_spec_override = _g_param_spec_overridePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<gchar>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_gtype(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int is_a_type,
    int flags,
  ) {
    return _g_param_spec_gtype(
      name,
      nick,
      blurb,
      is_a_type,
      flags,
    );
  }

  late final _g_param_spec_gtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_gtype');
  late final _g_param_spec_gtype = _g_param_spec_gtypePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_variant(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<GVariant> default_value,
    int flags,
  ) {
    return _g_param_spec_variant(
      name,
      nick,
      blurb,
      type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariant>,
              ffi.Int32)>>('g_param_spec_variant');
  late final _g_param_spec_variant = _g_param_spec_variantPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GVariantType>,
          ffi.Pointer<GVariant>,
          int)>();

  late final ffi.Pointer<ffi.Pointer<GType>> _g_param_spec_types =
      _lookup<ffi.Pointer<GType>>('g_param_spec_types');

  ffi.Pointer<GType> get g_param_spec_types => _g_param_spec_types.value;

  set g_param_spec_types(ffi.Pointer<GType> value) =>
      _g_param_spec_types.value = value;

  int g_signal_group_get_type() {
    return _g_signal_group_get_type();
  }

  late final _g_signal_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_signal_group_get_type');
  late final _g_signal_group_get_type =
      _g_signal_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSignalGroup> g_signal_group_new(
    int target_type,
  ) {
    return _g_signal_group_new(
      target_type,
    );
  }

  late final _g_signal_group_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSignalGroup> Function(GType)>>(
          'g_signal_group_new');
  late final _g_signal_group_new = _g_signal_group_newPtr
      .asFunction<ffi.Pointer<GSignalGroup> Function(int)>();

  void g_signal_group_set_target(
    ffi.Pointer<GSignalGroup> self,
    gpointer target,
  ) {
    return _g_signal_group_set_target(
      self,
      target,
    );
  }

  late final _g_signal_group_set_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>,
              gpointer)>>('g_signal_group_set_target');
  late final _g_signal_group_set_target = _g_signal_group_set_targetPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>, gpointer)>();

  gpointer g_signal_group_dup_target(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_dup_target(
      self,
    );
  }

  late final _g_signal_group_dup_targetPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_dup_target');
  late final _g_signal_group_dup_target = _g_signal_group_dup_targetPtr
      .asFunction<gpointer Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_block(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_block(
      self,
    );
  }

  late final _g_signal_group_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_block');
  late final _g_signal_group_block = _g_signal_group_blockPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_unblock(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_unblock(
      self,
    );
  }

  late final _g_signal_group_unblockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_unblock');
  late final _g_signal_group_unblock = _g_signal_group_unblockPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_connect_closure(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_group_connect_closure(
      self,
      detailed_signal,
      closure,
      after,
    );
  }

  late final _g_signal_group_connect_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GClosure>,
              gboolean)>>('g_signal_group_connect_closure');
  late final _g_signal_group_connect_closure =
      _g_signal_group_connect_closurePtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GClosure>, int)>();

  void g_signal_group_connect_object(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer object,
    int flags,
  ) {
    return _g_signal_group_connect_object(
      self,
      detailed_signal,
      c_handler,
      object,
      flags,
    );
  }

  late final _g_signal_group_connect_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<gchar>,
              GCallback,
              gpointer,
              ffi.Int32)>>('g_signal_group_connect_object');
  late final _g_signal_group_connect_object =
      _g_signal_group_connect_objectPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer, int)>();

  void g_signal_group_connect_data(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
    GClosureNotify notify,
    int flags,
  ) {
    return _g_signal_group_connect_data(
      self,
      detailed_signal,
      c_handler,
      data,
      notify,
      flags,
    );
  }

  late final _g_signal_group_connect_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<gchar>,
              GCallback,
              gpointer,
              GClosureNotify,
              ffi.Int32)>>('g_signal_group_connect_data');
  late final _g_signal_group_connect_data =
      _g_signal_group_connect_dataPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer, GClosureNotify, int)>();

  void g_signal_group_connect(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
  ) {
    return _g_signal_group_connect(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>>('g_signal_group_connect');
  late final _g_signal_group_connect = _g_signal_group_connectPtr.asFunction<
      void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>, GCallback,
          gpointer)>();

  void g_signal_group_connect_after(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
  ) {
    return _g_signal_group_connect_after(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connect_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>>('g_signal_group_connect_after');
  late final _g_signal_group_connect_after =
      _g_signal_group_connect_afterPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>();

  void g_signal_group_connect_swapped(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
  ) {
    return _g_signal_group_connect_swapped(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connect_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>>('g_signal_group_connect_swapped');
  late final _g_signal_group_connect_swapped =
      _g_signal_group_connect_swappedPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>();

  void g_source_set_closure(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_source_set_closure(
      source,
      closure,
    );
  }

  late final _g_source_set_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GClosure>)>>('g_source_set_closure');
  late final _g_source_set_closure = _g_source_set_closurePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GClosure>)>();

  void g_source_set_dummy_callback(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_set_dummy_callback(
      source,
    );
  }

  late final _g_source_set_dummy_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>)>>(
          'g_source_set_dummy_callback');
  late final _g_source_set_dummy_callback = _g_source_set_dummy_callbackPtr
      .asFunction<void Function(ffi.Pointer<GSource>)>();

  int g_type_module_get_type() {
    return _g_type_module_get_type();
  }

  late final _g_type_module_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_module_get_type');
  late final _g_type_module_get_type =
      _g_type_module_get_typePtr.asFunction<int Function()>();

  int g_type_module_use(
    ffi.Pointer<GTypeModule> module,
  ) {
    return _g_type_module_use(
      module,
    );
  }

  late final _g_type_module_usePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTypeModule>)>>(
          'g_type_module_use');
  late final _g_type_module_use = _g_type_module_usePtr
      .asFunction<int Function(ffi.Pointer<GTypeModule>)>();

  void g_type_module_unuse(
    ffi.Pointer<GTypeModule> module,
  ) {
    return _g_type_module_unuse(
      module,
    );
  }

  late final _g_type_module_unusePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypeModule>)>>(
          'g_type_module_unuse');
  late final _g_type_module_unuse = _g_type_module_unusePtr
      .asFunction<void Function(ffi.Pointer<GTypeModule>)>();

  void g_type_module_set_name(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<gchar> name,
  ) {
    return _g_type_module_set_name(
      module,
      name,
    );
  }

  late final _g_type_module_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTypeModule>,
              ffi.Pointer<gchar>)>>('g_type_module_set_name');
  late final _g_type_module_set_name = _g_type_module_set_namePtr.asFunction<
      void Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>)>();

  int g_type_module_register_type(
    ffi.Pointer<GTypeModule> module,
    int parent_type,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypeInfo> type_info,
    int flags,
  ) {
    return _g_type_module_register_type(
      module,
      parent_type,
      type_name,
      type_info,
      flags,
    );
  }

  late final _g_type_module_register_typePtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              ffi.Pointer<GTypeModule>,
              GType,
              ffi.Pointer<gchar>,
              ffi.Pointer<GTypeInfo>,
              ffi.Int32)>>('g_type_module_register_type');
  late final _g_type_module_register_type =
      _g_type_module_register_typePtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, int, ffi.Pointer<gchar>,
              ffi.Pointer<GTypeInfo>, int)>();

  void g_type_module_add_interface(
    ffi.Pointer<GTypeModule> module,
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> interface_info,
  ) {
    return _g_type_module_add_interface(
      module,
      instance_type,
      interface_type,
      interface_info,
    );
  }

  late final _g_type_module_add_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTypeModule>, GType, GType,
              ffi.Pointer<GInterfaceInfo>)>>('g_type_module_add_interface');
  late final _g_type_module_add_interface =
      _g_type_module_add_interfacePtr.asFunction<
          void Function(ffi.Pointer<GTypeModule>, int, int,
              ffi.Pointer<GInterfaceInfo>)>();

  int g_type_module_register_enum(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<gchar> name,
    ffi.Pointer<GEnumValue> const_static_values,
  ) {
    return _g_type_module_register_enum(
      module,
      name,
      const_static_values,
    );
  }

  late final _g_type_module_register_enumPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GEnumValue>)>>('g_type_module_register_enum');
  late final _g_type_module_register_enum =
      _g_type_module_register_enumPtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GEnumValue>)>();

  int g_type_module_register_flags(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<gchar> name,
    ffi.Pointer<GFlagsValue> const_static_values,
  ) {
    return _g_type_module_register_flags(
      module,
      name,
      const_static_values,
    );
  }

  late final _g_type_module_register_flagsPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GFlagsValue>)>>('g_type_module_register_flags');
  late final _g_type_module_register_flags =
      _g_type_module_register_flagsPtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GFlagsValue>)>();

  int g_type_plugin_get_type() {
    return _g_type_plugin_get_type();
  }

  late final _g_type_plugin_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_plugin_get_type');
  late final _g_type_plugin_get_type =
      _g_type_plugin_get_typePtr.asFunction<int Function()>();

  void g_type_plugin_use(
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_plugin_use(
      plugin,
    );
  }

  late final _g_type_plugin_usePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>(
          'g_type_plugin_use');
  late final _g_type_plugin_use = _g_type_plugin_usePtr
      .asFunction<void Function(ffi.Pointer<GTypePlugin>)>();

  void g_type_plugin_unuse(
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_plugin_unuse(
      plugin,
    );
  }

  late final _g_type_plugin_unusePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>(
          'g_type_plugin_unuse');
  late final _g_type_plugin_unuse = _g_type_plugin_unusePtr
      .asFunction<void Function(ffi.Pointer<GTypePlugin>)>();

  void g_type_plugin_complete_type_info(
    ffi.Pointer<GTypePlugin> plugin,
    int g_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeValueTable> value_table,
  ) {
    return _g_type_plugin_complete_type_info(
      plugin,
      g_type,
      info,
      value_table,
    );
  }

  late final _g_type_plugin_complete_type_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTypePlugin>, GType,
                  ffi.Pointer<GTypeInfo>, ffi.Pointer<GTypeValueTable>)>>(
      'g_type_plugin_complete_type_info');
  late final _g_type_plugin_complete_type_info =
      _g_type_plugin_complete_type_infoPtr.asFunction<
          void Function(ffi.Pointer<GTypePlugin>, int, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeValueTable>)>();

  void g_type_plugin_complete_interface_info(
    ffi.Pointer<GTypePlugin> plugin,
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> info,
  ) {
    return _g_type_plugin_complete_interface_info(
      plugin,
      instance_type,
      interface_type,
      info,
    );
  }

  late final _g_type_plugin_complete_interface_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTypePlugin>, GType, GType,
                  ffi.Pointer<GInterfaceInfo>)>>(
      'g_type_plugin_complete_interface_info');
  late final _g_type_plugin_complete_interface_info =
      _g_type_plugin_complete_interface_infoPtr.asFunction<
          void Function(ffi.Pointer<GTypePlugin>, int, int,
              ffi.Pointer<GInterfaceInfo>)>();

  int g_value_array_get_type() {
    return _g_value_array_get_type();
  }

  late final _g_value_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_value_array_get_type');
  late final _g_value_array_get_type =
      _g_value_array_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GValue> g_value_array_get_nth(
    ffi.Pointer<GValueArray> value_array,
    int index_,
  ) {
    return _g_value_array_get_nth(
      value_array,
      index_,
    );
  }

  late final _g_value_array_get_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValueArray>, guint)>>('g_value_array_get_nth');
  late final _g_value_array_get_nth = _g_value_array_get_nthPtr.asFunction<
      ffi.Pointer<GValue> Function(ffi.Pointer<GValueArray>, int)>();

  ffi.Pointer<GValueArray> g_value_array_new(
    int n_prealloced,
  ) {
    return _g_value_array_new(
      n_prealloced,
    );
  }

  late final _g_value_array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GValueArray> Function(guint)>>(
          'g_value_array_new');
  late final _g_value_array_new = _g_value_array_newPtr
      .asFunction<ffi.Pointer<GValueArray> Function(int)>();

  void g_value_array_free(
    ffi.Pointer<GValueArray> value_array,
  ) {
    return _g_value_array_free(
      value_array,
    );
  }

  late final _g_value_array_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValueArray>)>>(
          'g_value_array_free');
  late final _g_value_array_free = _g_value_array_freePtr
      .asFunction<void Function(ffi.Pointer<GValueArray>)>();

  ffi.Pointer<GValueArray> g_value_array_copy(
    ffi.Pointer<GValueArray> value_array,
  ) {
    return _g_value_array_copy(
      value_array,
    );
  }

  late final _g_value_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>)>>('g_value_array_copy');
  late final _g_value_array_copy = _g_value_array_copyPtr.asFunction<
      ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>)>();

  ffi.Pointer<GValueArray> g_value_array_prepend(
    ffi.Pointer<GValueArray> value_array,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_prepend(
      value_array,
      value,
    );
  }

  late final _g_value_array_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              ffi.Pointer<GValue>)>>('g_value_array_prepend');
  late final _g_value_array_prepend = _g_value_array_prependPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_append(
    ffi.Pointer<GValueArray> value_array,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_append(
      value_array,
      value,
    );
  }

  late final _g_value_array_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              ffi.Pointer<GValue>)>>('g_value_array_append');
  late final _g_value_array_append = _g_value_array_appendPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_insert(
    ffi.Pointer<GValueArray> value_array,
    int index_,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_insert(
      value_array,
      index_,
      value,
    );
  }

  late final _g_value_array_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>, guint,
              ffi.Pointer<GValue>)>>('g_value_array_insert');
  late final _g_value_array_insert = _g_value_array_insertPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, int, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_remove(
    ffi.Pointer<GValueArray> value_array,
    int index_,
  ) {
    return _g_value_array_remove(
      value_array,
      index_,
    );
  }

  late final _g_value_array_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, guint)>>('g_value_array_remove');
  late final _g_value_array_remove = _g_value_array_removePtr.asFunction<
      ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>, int)>();

  ffi.Pointer<GValueArray> g_value_array_sort(
    ffi.Pointer<GValueArray> value_array,
    GCompareFunc compare_func,
  ) {
    return _g_value_array_sort(
      value_array,
      compare_func,
    );
  }

  late final _g_value_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, GCompareFunc)>>('g_value_array_sort');
  late final _g_value_array_sort = _g_value_array_sortPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, GCompareFunc)>();

  ffi.Pointer<GValueArray> g_value_array_sort_with_data(
    ffi.Pointer<GValueArray> value_array,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_value_array_sort_with_data(
      value_array,
      compare_func,
      user_data,
    );
  }

  late final _g_value_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              GCompareDataFunc, gpointer)>>('g_value_array_sort_with_data');
  late final _g_value_array_sort_with_data =
      _g_value_array_sort_with_dataPtr.asFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, GCompareDataFunc, gpointer)>();

  void g_value_set_char(
    ffi.Pointer<GValue> value,
    int v_char,
  ) {
    return _g_value_set_char(
      value,
      v_char,
    );
  }

  late final _g_value_set_charPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gchar)>>(
      'g_value_set_char');
  late final _g_value_set_char = _g_value_set_charPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_char(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_char(
      value,
    );
  }

  late final _g_value_get_charPtr =
      _lookup<ffi.NativeFunction<gchar Function(ffi.Pointer<GValue>)>>(
          'g_value_get_char');
  late final _g_value_get_char =
      _g_value_get_charPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_schar(
    ffi.Pointer<GValue> value,
    int v_char,
  ) {
    return _g_value_set_schar(
      value,
      v_char,
    );
  }

  late final _g_value_set_scharPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint8)>>(
      'g_value_set_schar');
  late final _g_value_set_schar = _g_value_set_scharPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_schar(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_schar(
      value,
    );
  }

  late final _g_value_get_scharPtr =
      _lookup<ffi.NativeFunction<gint8 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_schar');
  late final _g_value_get_schar =
      _g_value_get_scharPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uchar(
    ffi.Pointer<GValue> value,
    int v_uchar,
  ) {
    return _g_value_set_uchar(
      value,
      v_uchar,
    );
  }

  late final _g_value_set_ucharPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guchar)>>(
      'g_value_set_uchar');
  late final _g_value_set_uchar = _g_value_set_ucharPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uchar(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uchar(
      value,
    );
  }

  late final _g_value_get_ucharPtr =
      _lookup<ffi.NativeFunction<guchar Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uchar');
  late final _g_value_get_uchar =
      _g_value_get_ucharPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_boolean(
    ffi.Pointer<GValue> value,
    int v_boolean,
  ) {
    return _g_value_set_boolean(
      value,
      v_boolean,
    );
  }

  late final _g_value_set_booleanPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gboolean)>>(
      'g_value_set_boolean');
  late final _g_value_set_boolean = _g_value_set_booleanPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_boolean(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_boolean(
      value,
    );
  }

  late final _g_value_get_booleanPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_value_get_boolean');
  late final _g_value_get_boolean =
      _g_value_get_booleanPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_int(
    ffi.Pointer<GValue> value,
    int v_int,
  ) {
    return _g_value_set_int(
      value,
      v_int,
    );
  }

  late final _g_value_set_intPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint)>>(
          'g_value_set_int');
  late final _g_value_set_int =
      _g_value_set_intPtr.asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_int(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_int(
      value,
    );
  }

  late final _g_value_get_intPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_int');
  late final _g_value_get_int =
      _g_value_get_intPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uint(
    ffi.Pointer<GValue> value,
    int v_uint,
  ) {
    return _g_value_set_uint(
      value,
      v_uint,
    );
  }

  late final _g_value_set_uintPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint)>>(
      'g_value_set_uint');
  late final _g_value_set_uint = _g_value_set_uintPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uint(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uint(
      value,
    );
  }

  late final _g_value_get_uintPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uint');
  late final _g_value_get_uint =
      _g_value_get_uintPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_long(
    ffi.Pointer<GValue> value,
    int v_long,
  ) {
    return _g_value_set_long(
      value,
      v_long,
    );
  }

  late final _g_value_set_longPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, glong)>>(
      'g_value_set_long');
  late final _g_value_set_long = _g_value_set_longPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_long(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_long(
      value,
    );
  }

  late final _g_value_get_longPtr =
      _lookup<ffi.NativeFunction<glong Function(ffi.Pointer<GValue>)>>(
          'g_value_get_long');
  late final _g_value_get_long =
      _g_value_get_longPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_ulong(
    ffi.Pointer<GValue> value,
    int v_ulong,
  ) {
    return _g_value_set_ulong(
      value,
      v_ulong,
    );
  }

  late final _g_value_set_ulongPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gulong)>>(
      'g_value_set_ulong');
  late final _g_value_set_ulong = _g_value_set_ulongPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_ulong(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_ulong(
      value,
    );
  }

  late final _g_value_get_ulongPtr =
      _lookup<ffi.NativeFunction<gulong Function(ffi.Pointer<GValue>)>>(
          'g_value_get_ulong');
  late final _g_value_get_ulong =
      _g_value_get_ulongPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_int64(
    ffi.Pointer<GValue> value,
    int v_int64,
  ) {
    return _g_value_set_int64(
      value,
      v_int64,
    );
  }

  late final _g_value_set_int64Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint64)>>(
      'g_value_set_int64');
  late final _g_value_set_int64 = _g_value_set_int64Ptr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_int64(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_int64(
      value,
    );
  }

  late final _g_value_get_int64Ptr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_int64');
  late final _g_value_get_int64 =
      _g_value_get_int64Ptr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uint64(
    ffi.Pointer<GValue> value,
    int v_uint64,
  ) {
    return _g_value_set_uint64(
      value,
      v_uint64,
    );
  }

  late final _g_value_set_uint64Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint64)>>(
      'g_value_set_uint64');
  late final _g_value_set_uint64 = _g_value_set_uint64Ptr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uint64(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uint64(
      value,
    );
  }

  late final _g_value_get_uint64Ptr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uint64');
  late final _g_value_get_uint64 =
      _g_value_get_uint64Ptr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_float(
    ffi.Pointer<GValue> value,
    double v_float,
  ) {
    return _g_value_set_float(
      value,
      v_float,
    );
  }

  late final _g_value_set_floatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gfloat)>>(
      'g_value_set_float');
  late final _g_value_set_float = _g_value_set_floatPtr
      .asFunction<void Function(ffi.Pointer<GValue>, double)>();

  double g_value_get_float(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_float(
      value,
    );
  }

  late final _g_value_get_floatPtr =
      _lookup<ffi.NativeFunction<gfloat Function(ffi.Pointer<GValue>)>>(
          'g_value_get_float');
  late final _g_value_get_float =
      _g_value_get_floatPtr.asFunction<double Function(ffi.Pointer<GValue>)>();

  void g_value_set_double(
    ffi.Pointer<GValue> value,
    double v_double,
  ) {
    return _g_value_set_double(
      value,
      v_double,
    );
  }

  late final _g_value_set_doublePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gdouble)>>(
      'g_value_set_double');
  late final _g_value_set_double = _g_value_set_doublePtr
      .asFunction<void Function(ffi.Pointer<GValue>, double)>();

  double g_value_get_double(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_double(
      value,
    );
  }

  late final _g_value_get_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GValue>)>>(
          'g_value_get_double');
  late final _g_value_get_double =
      _g_value_get_doublePtr.asFunction<double Function(ffi.Pointer<GValue>)>();

  void g_value_set_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, ffi.Pointer<gchar>)>>('g_value_set_string');
  late final _g_value_set_string = _g_value_set_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  void g_value_set_static_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_static_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_static_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<gchar>)>>('g_value_set_static_string');
  late final _g_value_set_static_string = _g_value_set_static_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  void g_value_set_interned_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_interned_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_interned_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<gchar>)>>('g_value_set_interned_string');
  late final _g_value_set_interned_string = _g_value_set_interned_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_value_get_string(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_string(
      value,
    );
  }

  late final _g_value_get_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>>(
      'g_value_get_string');
  late final _g_value_get_string = _g_value_get_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<gchar> g_value_dup_string(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_string(
      value,
    );
  }

  late final _g_value_dup_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>>(
      'g_value_dup_string');
  late final _g_value_dup_string = _g_value_dup_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>();

  void g_value_set_pointer(
    ffi.Pointer<GValue> value,
    gpointer v_pointer,
  ) {
    return _g_value_set_pointer(
      value,
      v_pointer,
    );
  }

  late final _g_value_set_pointerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_pointer');
  late final _g_value_set_pointer = _g_value_set_pointerPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  gpointer g_value_get_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_pointer(
      value,
    );
  }

  late final _g_value_get_pointerPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_pointer');
  late final _g_value_get_pointer = _g_value_get_pointerPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_gtype_get_type() {
    return _g_gtype_get_type();
  }

  late final _g_gtype_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_gtype_get_type');
  late final _g_gtype_get_type =
      _g_gtype_get_typePtr.asFunction<int Function()>();

  void g_value_set_gtype(
    ffi.Pointer<GValue> value,
    int v_gtype,
  ) {
    return _g_value_set_gtype(
      value,
      v_gtype,
    );
  }

  late final _g_value_set_gtypePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, GType)>>(
      'g_value_set_gtype');
  late final _g_value_set_gtype = _g_value_set_gtypePtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_gtype(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_gtype(
      value,
    );
  }

  late final _g_value_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GValue>)>>(
          'g_value_get_gtype');
  late final _g_value_get_gtype =
      _g_value_get_gtypePtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_variant(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
  ) {
    return _g_value_set_variant(
      value,
      variant,
    );
  }

  late final _g_value_set_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GVariant>)>>('g_value_set_variant');
  late final _g_value_set_variant = _g_value_set_variantPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GVariant>)>();

  void g_value_take_variant(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
  ) {
    return _g_value_take_variant(
      value,
      variant,
    );
  }

  late final _g_value_take_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GVariant>)>>('g_value_take_variant');
  late final _g_value_take_variant = _g_value_take_variantPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_value_get_variant(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_variant(
      value,
    );
  }

  late final _g_value_get_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GValue>)>>('g_value_get_variant');
  late final _g_value_get_variant = _g_value_get_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GVariant> g_value_dup_variant(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_variant(
      value,
    );
  }

  late final _g_value_dup_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GValue>)>>('g_value_dup_variant');
  late final _g_value_dup_variant = _g_value_dup_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>();

  int g_pointer_type_register_static(
    ffi.Pointer<gchar> name,
  ) {
    return _g_pointer_type_register_static(
      name,
    );
  }

  late final _g_pointer_type_register_staticPtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<gchar>)>>(
          'g_pointer_type_register_static');
  late final _g_pointer_type_register_static =
      _g_pointer_type_register_staticPtr
          .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strdup_value_contents(
    ffi.Pointer<GValue> value,
  ) {
    return _g_strdup_value_contents(
      value,
    );
  }

  late final _g_strdup_value_contentsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>>(
      'g_strdup_value_contents');
  late final _g_strdup_value_contents = _g_strdup_value_contentsPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>();

  void g_value_take_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_take_string(
      value,
      v_string,
    );
  }

  late final _g_value_take_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, ffi.Pointer<gchar>)>>('g_value_take_string');
  late final _g_value_take_string = _g_value_take_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  void g_value_set_string_take_ownership(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_string_take_ownership(
      value,
      v_string,
    );
  }

  late final _g_value_set_string_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<gchar>)>>('g_value_set_string_take_ownership');
  late final _g_value_set_string_take_ownership =
      _g_value_set_string_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();
}

/// GValue:
///
/// An opaque structure used to hold different types of values.
///
/// The data within the structure has protected scope: it is accessible only
/// to functions within a #GTypeValueTable structure, or implementations of
/// the g_value_*() API. That is, code portions which implement new fundamental
/// types.
///
/// #GValue users cannot make any assumptions about how data is stored
/// within the 2 element @data union, and the @g_type member should
/// only be accessed through the G_VALUE_TYPE() macro.
class _GValue extends ffi.Struct {
  @GType()
  external int g_type;

  @ffi.Array.multi([2])
  external ffi.Array<UnnamedUnion1> data;
}

typedef GType = gsize;
typedef gsize = ffi.UnsignedLong;

class UnnamedUnion1 extends ffi.Union {
  @gint()
  external int v_int;

  @guint()
  external int v_uint;

  @glong()
  external int v_long;

  @gulong()
  external int v_ulong;

  @gint64()
  external int v_int64;

  @guint64()
  external int v_uint64;

  @gfloat()
  external double v_float;

  @gdouble()
  external double v_double;

  external gpointer v_pointer;
}

typedef gint = ffi.Int;
typedef guint = ffi.UnsignedInt;
typedef glong = ffi.Long;
typedef gulong = ffi.UnsignedLong;
typedef gint64 = ffi.Long;
typedef guint64 = ffi.UnsignedLong;
typedef gfloat = ffi.Float;
typedef gdouble = ffi.Double;
typedef gpointer = ffi.Pointer<ffi.Void>;

class _GTypePlugin extends ffi.Opaque {}

/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
class _GTypeClass extends ffi.Struct {
  @GType()
  external int g_type;
}

/// GTypeInterface:
///
/// An opaque structure used as the base of all interface types.
class _GTypeInterface extends ffi.Struct {
  @GType()
  external int g_type;

  @GType()
  external int g_instance_type;
}

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
class _GTypeInstance extends ffi.Struct {
  external ffi.Pointer<GTypeClass> g_class;
}

typedef GTypeClass = _GTypeClass;

/// GTypeInfo:
/// @class_size: Size of the class structure (required for interface, classed and instantiatable types)
/// @base_init: Location of the base initialization function (optional)
/// @base_finalize: Location of the base finalization function (optional)
/// @class_init: Location of the class initialization function for
/// classed and instantiatable types. Location of the default vtable
/// inititalization function for interface types. (optional) This function
/// is used both to fill in virtual functions in the class or default vtable,
/// and to do type-specific setup such as registering signals and object
/// properties.
/// @class_finalize: Location of the class finalization function for
/// classed and instantiatable types. Location of the default vtable
/// finalization function for interface types. (optional)
/// @class_data: User-supplied data passed to the class init/finalize functions
/// @instance_size: Size of the instance (object) structure (required for instantiatable types only)
/// @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.
/// @instance_init: Location of the instance initialization function (optional, for instantiatable types only)
/// @value_table: A #GTypeValueTable function table for generic handling of GValues
/// of this type (usually only useful for fundamental types)
///
/// This structure is used to provide the type system with the information
/// required to initialize and destruct (finalize) a type's class and
/// its instances.
///
/// The initialized structure is passed to the g_type_register_static() function
/// (or is copied into the provided #GTypeInfo structure in the
/// g_type_plugin_complete_type_info()). The type system will perform a deep
/// copy of this structure, so its memory does not need to be persistent
/// across invocation of g_type_register_static().
class _GTypeInfo extends ffi.Struct {
  @guint16()
  external int class_size;

  external GBaseInitFunc base_init;

  external GBaseFinalizeFunc base_finalize;

  external GClassInitFunc class_init;

  external GClassFinalizeFunc class_finalize;

  external gconstpointer class_data;

  @guint16()
  external int instance_size;

  @guint16()
  external int n_preallocs;

  external GInstanceInitFunc instance_init;

  external ffi.Pointer<GTypeValueTable> value_table;
}

typedef guint16 = ffi.UnsignedShort;

/// GBaseInitFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to initialize
///
/// A callback function used by the type system to do base initialization
/// of the class structures of derived types.
///
/// This function is called as part of the initialization process of all derived
/// classes and should reallocate or reset all dynamic class members copied over
/// from the parent class.
///
/// For example, class members (such as strings) that are not sufficiently
/// handled by a plain memory copy of the parent class into the derived class
/// have to be altered. See GClassInitFunc() for a discussion of the class
/// initialization process.
typedef GBaseInitFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer)>>;

/// GBaseFinalizeFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to finalize
///
/// A callback function used by the type system to finalize those portions
/// of a derived types class structure that were setup from the corresponding
/// GBaseInitFunc() function.
///
/// Class finalization basically works the inverse way in which class
/// initialization is performed.
///
/// See GClassInitFunc() for a discussion of the class initialization process.
typedef GBaseFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer)>>;

/// GClassInitFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to initialize.
/// @class_data: The @class_data member supplied via the #GTypeInfo structure.
///
/// A callback function used by the type system to initialize the class
/// of a specific type.
///
/// This function should initialize all static class members.
///
/// The initialization process of a class involves:
///
/// - Copying common members from the parent class over to the
/// derived class structure.
/// - Zero initialization of the remaining members not copied
/// over from the parent class.
/// - Invocation of the GBaseInitFunc() initializers of all parent
/// types and the class' type.
/// - Invocation of the class' GClassInitFunc() initializer.
///
/// Since derived classes are partially initialized through a memory copy
/// of the parent class, the general rule is that GBaseInitFunc() and
/// GBaseFinalizeFunc() should take care of necessary reinitialization
/// and release of those class members that were introduced by the type
/// that specified these GBaseInitFunc()/GBaseFinalizeFunc().
/// GClassInitFunc() should only care about initializing static
/// class members, while dynamic class members (such as allocated strings
/// or reference counted resources) are better handled by a GBaseInitFunc()
/// for this type, so proper initialization of the dynamic class members
/// is performed for class initialization of derived types as well.
///
/// An example may help to correspond the intend of the different class
/// initializers:
///
/// |[<!-- language="C" -->
/// typedef struct {
/// GObjectClass parent_class;
/// gint         static_integer;
/// gchar       *dynamic_string;
/// } TypeAClass;
/// static void
/// type_a_base_class_init (TypeAClass *class)
/// {
/// class->dynamic_string = g_strdup ("some string");
/// }
/// static void
/// type_a_base_class_finalize (TypeAClass *class)
/// {
/// g_free (class->dynamic_string);
/// }
/// static void
/// type_a_class_init (TypeAClass *class)
/// {
/// class->static_integer = 42;
/// }
///
/// typedef struct {
/// TypeAClass   parent_class;
/// gfloat       static_float;
/// GString     *dynamic_gstring;
/// } TypeBClass;
/// static void
/// type_b_base_class_init (TypeBClass *class)
/// {
/// class->dynamic_gstring = g_string_new ("some other string");
/// }
/// static void
/// type_b_base_class_finalize (TypeBClass *class)
/// {
/// g_string_free (class->dynamic_gstring);
/// }
/// static void
/// type_b_class_init (TypeBClass *class)
/// {
/// class->static_float = 3.14159265358979323846;
/// }
/// ]|
///
/// Initialization of TypeBClass will first cause initialization of
/// TypeAClass (derived classes reference their parent classes, see
/// g_type_class_ref() on this).
///
/// Initialization of TypeAClass roughly involves zero-initializing its fields,
/// then calling its GBaseInitFunc() type_a_base_class_init() to allocate
/// its dynamic members (dynamic_string), and finally calling its GClassInitFunc()
/// type_a_class_init() to initialize its static members (static_integer).
/// The first step in the initialization process of TypeBClass is then
/// a plain memory copy of the contents of TypeAClass into TypeBClass and
/// zero-initialization of the remaining fields in TypeBClass.
/// The dynamic members of TypeAClass within TypeBClass now need
/// reinitialization which is performed by calling type_a_base_class_init()
/// with an argument of TypeBClass.
///
/// After that, the GBaseInitFunc() of TypeBClass, type_b_base_class_init()
/// is called to allocate the dynamic members of TypeBClass (dynamic_gstring),
/// and finally the GClassInitFunc() of TypeBClass, type_b_class_init(),
/// is called to complete the initialization process with the static members
/// (static_float).
///
/// Corresponding finalization counter parts to the GBaseInitFunc() functions
/// have to be provided to release allocated resources at class finalization
/// time.
typedef GClassInitFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer, gpointer)>>;

/// GClassFinalizeFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to finalize
/// @class_data: The @class_data member supplied via the #GTypeInfo structure
///
/// A callback function used by the type system to finalize a class.
///
/// This function is rarely needed, as dynamically allocated class resources
/// should be handled by GBaseInitFunc() and GBaseFinalizeFunc().
///
/// Also, specification of a GClassFinalizeFunc() in the #GTypeInfo
/// structure of a static type is invalid, because classes of static types
/// will never be finalized (they are artificially kept alive when their
/// reference count drops to zero).
typedef GClassFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer, gpointer)>>;
typedef gconstpointer = ffi.Pointer<ffi.Void>;

/// GInstanceInitFunc:
/// @instance: The instance to initialize
/// @g_class: (type GObject.TypeClass): The class of the type the instance is
/// created for
///
/// A callback function used by the type system to initialize a new
/// instance of a type.
///
/// This function initializes all instance members and allocates any resources
/// required by it.
///
/// Initialization of a derived instance involves calling all its parent
/// types instance initializers, so the class member of the instance
/// is altered during its initialization to always point to the class that
/// belongs to the type the current initializer was introduced for.
///
/// The extended members of @instance are guaranteed to have been filled with
/// zeros before this function is called.
typedef GInstanceInitFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<GTypeInstance>, gpointer)>>;
typedef GTypeInstance = _GTypeInstance;
typedef GTypeValueTable = _GTypeValueTable;

/// GTypeValueTable:
/// @value_init: Default initialize @values contents by poking values
/// directly into the value->data array. The data array of
/// the #GValue passed into this function was zero-filled
/// with `memset()`, so no care has to be taken to free any
/// old contents. E.g. for the implementation of a string
/// value that may never be %NULL, the implementation might
/// look like:
/// |[<!-- language="C" -->
/// value->data[0].v_pointer = g_strdup ("");
/// ]|
/// @value_free: Free any old contents that might be left in the
/// data array of the passed in @value. No resources may
/// remain allocated through the #GValue contents after
/// this function returns. E.g. for our above string type:
/// |[<!-- language="C" -->
/// // only free strings without a specific flag for static storage
/// if (!(value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS))
/// g_free (value->data[0].v_pointer);
/// ]|
/// @value_copy: @dest_value is a #GValue with zero-filled data section
/// and @src_value is a properly setup #GValue of same or
/// derived type.
/// The purpose of this function is to copy the contents of
/// @src_value into @dest_value in a way, that even after
/// @src_value has been freed, the contents of @dest_value
/// remain valid. String type example:
/// |[<!-- language="C" -->
/// dest_value->data[0].v_pointer = g_strdup (src_value->data[0].v_pointer);
/// ]|
/// @value_peek_pointer: If the value contents fit into a pointer, such as objects
/// or strings, return this pointer, so the caller can peek at
/// the current contents. To extend on our above string example:
/// |[<!-- language="C" -->
/// return value->data[0].v_pointer;
/// ]|
/// @collect_format: A string format describing how to collect the contents of
/// this value bit-by-bit. Each character in the format represents
/// an argument to be collected, and the characters themselves indicate
/// the type of the argument. Currently supported arguments are:
/// - 'i' - Integers. passed as collect_values[].v_int.
/// - 'l' - Longs. passed as collect_values[].v_long.
/// - 'd' - Doubles. passed as collect_values[].v_double.
/// - 'p' - Pointers. passed as collect_values[].v_pointer.
/// It should be noted that for variable argument list construction,
/// ANSI C promotes every type smaller than an integer to an int, and
/// floats to doubles. So for collection of short int or char, 'i'
/// needs to be used, and for collection of floats 'd'.
/// @collect_value: The collect_value() function is responsible for converting the
/// values collected from a variable argument list into contents
/// suitable for storage in a GValue. This function should setup
/// @value similar to value_init(); e.g. for a string value that
/// does not allow %NULL pointers, it needs to either spew an error,
/// or do an implicit conversion by storing an empty string.
/// The @value passed in to this function has a zero-filled data
/// array, so just like for value_init() it is guaranteed to not
/// contain any old contents that might need freeing.
/// @n_collect_values is exactly the string length of @collect_format,
/// and @collect_values is an array of unions #GTypeCValue with
/// length @n_collect_values, containing the collected values
/// according to @collect_format.
/// @collect_flags is an argument provided as a hint by the caller.
/// It may contain the flag %G_VALUE_NOCOPY_CONTENTS indicating,
/// that the collected value contents may be considered "static"
/// for the duration of the @value lifetime.
/// Thus an extra copy of the contents stored in @collect_values is
/// not required for assignment to @value.
/// For our above string example, we continue with:
/// |[<!-- language="C" -->
/// if (!collect_values[0].v_pointer)
/// value->data[0].v_pointer = g_strdup ("");
/// else if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
/// {
/// value->data[0].v_pointer = collect_values[0].v_pointer;
/// // keep a flag for the value_free() implementation to not free this string
/// value->data[1].v_uint = G_VALUE_NOCOPY_CONTENTS;
/// }
/// else
/// value->data[0].v_pointer = g_strdup (collect_values[0].v_pointer);
/// return NULL;
/// ]|
/// It should be noted, that it is generally a bad idea to follow the
/// %G_VALUE_NOCOPY_CONTENTS hint for reference counted types. Due to
/// reentrancy requirements and reference count assertions performed
/// by the signal emission code, reference counts should always be
/// incremented for reference counted contents stored in the value->data
/// array.  To deviate from our string example for a moment, and taking
/// a look at an exemplary implementation for collect_value() of
/// #GObject:
/// |[<!-- language="C" -->
/// GObject *object = G_OBJECT (collect_values[0].v_pointer);
/// g_return_val_if_fail (object != NULL,
/// g_strdup_printf ("Object passed as invalid NULL pointer"));
/// // never honour G_VALUE_NOCOPY_CONTENTS for ref-counted types
/// value->data[0].v_pointer = g_object_ref (object);
/// return NULL;
/// ]|
/// The reference count for valid objects is always incremented,
/// regardless of @collect_flags. For invalid objects, the example
/// returns a newly allocated string without altering @value.
/// Upon success, collect_value() needs to return %NULL. If, however,
/// an error condition occurred, collect_value() may spew an
/// error by returning a newly allocated non-%NULL string, giving
/// a suitable description of the error condition.
/// The calling code makes no assumptions about the @value
/// contents being valid upon error returns, @value
/// is simply thrown away without further freeing. As such, it is
/// a good idea to not allocate #GValue contents, prior to returning
/// an error, however, collect_values() is not obliged to return
/// a correctly setup @value for error returns, simply because
/// any non-%NULL return is considered a fatal condition so further
/// program behaviour is undefined.
/// @lcopy_format: Format description of the arguments to collect for @lcopy_value,
/// analogous to @collect_format. Usually, @lcopy_format string consists
/// only of 'p's to provide lcopy_value() with pointers to storage locations.
/// @lcopy_value: This function is responsible for storing the @value contents into
/// arguments passed through a variable argument list which got
/// collected into @collect_values according to @lcopy_format.
/// @n_collect_values equals the string length of @lcopy_format,
/// and @collect_flags may contain %G_VALUE_NOCOPY_CONTENTS.
/// In contrast to collect_value(), lcopy_value() is obliged to
/// always properly support %G_VALUE_NOCOPY_CONTENTS.
/// Similar to collect_value() the function may prematurely abort
/// by returning a newly allocated string describing an error condition.
/// To complete the string example:
/// |[<!-- language="C" -->
/// gchar **string_p = collect_values[0].v_pointer;
/// g_return_val_if_fail (string_p != NULL,
/// g_strdup_printf ("string location passed as NULL"));
/// if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
/// *string_p = value->data[0].v_pointer;
/// else
/// *string_p = g_strdup (value->data[0].v_pointer);
/// ]|
/// And an illustrative version of lcopy_value() for
/// reference-counted types:
/// |[<!-- language="C" -->
/// GObject **object_p = collect_values[0].v_pointer;
/// g_return_val_if_fail (object_p != NULL,
/// g_strdup_printf ("object location passed as NULL"));
/// if (!value->data[0].v_pointer)
/// *object_p = NULL;
/// else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) // always honour
/// *object_p = value->data[0].v_pointer;
/// else
/// *object_p = g_object_ref (value->data[0].v_pointer);
/// return NULL;
/// ]|
///
/// The #GTypeValueTable provides the functions required by the #GValue
/// implementation, to serve as a container for values of a type.
class _GTypeValueTable extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>)>>
      value_init;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>)>>
      value_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>
      value_copy;

  external ffi
          .Pointer<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>
      value_peek_pointer;

  external ffi.Pointer<gchar> collect_format;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GValue>, guint, ffi.Pointer<GTypeCValue>, guint)>>
      collect_value;

  external ffi.Pointer<gchar> lcopy_format;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GValue>, guint, ffi.Pointer<GTypeCValue>, guint)>>
      lcopy_value;
}

typedef GValue = _GValue;
typedef gchar = ffi.Char;
typedef GTypeCValue = _GTypeCValue;

class _GTypeCValue extends ffi.Opaque {}

/// GTypeFundamentalInfo:
/// @type_flags: #GTypeFundamentalFlags describing the characteristics of the fundamental type
///
/// A structure that provides information to the type system which is
/// used specifically for managing fundamental types.
class _GTypeFundamentalInfo extends ffi.Struct {
  @ffi.Int32()
  external int type_flags;
}

/// GTypeFundamentalFlags:
/// @G_TYPE_FLAG_CLASSED: Indicates a classed type
/// @G_TYPE_FLAG_INSTANTIATABLE: Indicates an instantiatable type (implies classed)
/// @G_TYPE_FLAG_DERIVABLE: Indicates a flat derivable type
/// @G_TYPE_FLAG_DEEP_DERIVABLE: Indicates a deep derivable type (implies derivable)
///
/// Bit masks used to check or determine specific characteristics of a
/// fundamental type.
abstract class GTypeFundamentalFlags {
  static const int G_TYPE_FLAG_CLASSED = 1;
  static const int G_TYPE_FLAG_INSTANTIATABLE = 2;
  static const int G_TYPE_FLAG_DERIVABLE = 4;
  static const int G_TYPE_FLAG_DEEP_DERIVABLE = 8;
}

/// GInterfaceInfo:
/// @interface_init: location of the interface initialization function
/// @interface_finalize: location of the interface finalization function
/// @interface_data: user-supplied data passed to the interface init/finalize functions
///
/// A structure that provides information to the type system which is
/// used specifically for managing interface types.
class _GInterfaceInfo extends ffi.Struct {
  external GInterfaceInitFunc interface_init;

  external GInterfaceFinalizeFunc interface_finalize;

  external gpointer interface_data;
}

/// GInterfaceInitFunc:
/// @g_iface: (type GObject.TypeInterface): The interface structure to initialize
/// @iface_data: The @interface_data supplied via the #GInterfaceInfo structure
///
/// A callback function used by the type system to initialize a new
/// interface.
///
/// This function should initialize all internal data and* allocate any
/// resources required by the interface.
///
/// The members of @iface_data are guaranteed to have been filled with
/// zeros before this function is called.
typedef GInterfaceInitFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer, gpointer)>>;

/// GInterfaceFinalizeFunc:
/// @g_iface: (type GObject.TypeInterface): The interface structure to finalize
/// @iface_data: The @interface_data supplied via the #GInterfaceInfo structure
///
/// A callback function used by the type system to finalize an interface.
///
/// This function should destroy any internal data and release any resources
/// allocated by the corresponding GInterfaceInitFunc() function.
typedef GInterfaceFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer, gpointer)>>;

/// GTypeQuery:
/// @type: the #GType value of the type
/// @type_name: the name of the type
/// @class_size: the size of the class structure
/// @instance_size: the size of the instance structure
///
/// A structure holding information for a specific type.
///
/// See also: g_type_query()
class _GTypeQuery extends ffi.Struct {
  @GType()
  external int type;

  external ffi.Pointer<gchar> type_name;

  @guint()
  external int class_size;

  @guint()
  external int instance_size;
}

/// GTypeDebugFlags:
/// @G_TYPE_DEBUG_NONE: Print no messages
/// @G_TYPE_DEBUG_OBJECTS: Print messages about object bookkeeping
/// @G_TYPE_DEBUG_SIGNALS: Print messages about signal emissions
/// @G_TYPE_DEBUG_MASK: Mask covering all debug flags
/// @G_TYPE_DEBUG_INSTANCE_COUNT: Keep a count of instances of each type
///
/// These flags used to be passed to g_type_init_with_debug_flags() which
/// is now deprecated.
///
/// If you need to enable debugging features, use the GOBJECT_DEBUG
/// environment variable.
///
/// Deprecated: 2.36: g_type_init() is now done automatically
abstract class GTypeDebugFlags {
  static const int G_TYPE_DEBUG_NONE = 0;
  static const int G_TYPE_DEBUG_OBJECTS = 1;
  static const int G_TYPE_DEBUG_SIGNALS = 2;
  static const int G_TYPE_DEBUG_INSTANCE_COUNT = 4;
  static const int G_TYPE_DEBUG_MASK = 7;
}

typedef GQuark = guint32;
typedef guint32 = ffi.UnsignedInt;
typedef gboolean = gint;
typedef GTypeQuery = _GTypeQuery;

/// GTypeFlags:
/// @G_TYPE_FLAG_NONE: No special flags. Since: 2.74
/// @G_TYPE_FLAG_ABSTRACT: Indicates an abstract type. No instances can be
/// created for an abstract type
/// @G_TYPE_FLAG_VALUE_ABSTRACT: Indicates an abstract value type, i.e. a type
/// that introduces a value table, but can't be used for
/// g_value_init()
/// @G_TYPE_FLAG_FINAL: Indicates a final type. A final type is a non-derivable
/// leaf node in a deep derivable type hierarchy tree. Since: 2.70
///
/// Bit masks used to check or determine characteristics of a type.
abstract class GTypeFlags {
  static const int G_TYPE_FLAG_NONE = 0;
  static const int G_TYPE_FLAG_ABSTRACT = 16;
  static const int G_TYPE_FLAG_VALUE_ABSTRACT = 32;
  static const int G_TYPE_FLAG_FINAL = 64;
}

typedef GTypeInfo = _GTypeInfo;
typedef GTypePlugin = _GTypePlugin;
typedef GTypeFundamentalInfo = _GTypeFundamentalInfo;
typedef GInterfaceInfo = _GInterfaceInfo;

/// GTypeClassCacheFunc:
/// @cache_data: data that was given to the g_type_add_class_cache_func() call
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure which is
/// unreferenced
///
/// A callback function which is called when the reference count of a class
/// drops to zero.
///
/// It may use g_type_class_ref() to prevent the class from being freed. You
/// should not call g_type_class_unref() from a #GTypeClassCacheFunc function
/// to prevent infinite recursion, use g_type_class_unref_uncached() instead.
///
/// The functions have to check the class id passed in to figure
/// whether they actually want to cache the class of this type, since all
/// classes are routed through the same #GTypeClassCacheFunc chain.
///
/// Returns: %TRUE to stop further #GTypeClassCacheFuncs from being
/// called, %FALSE to continue
typedef GTypeClassCacheFunc = ffi.Pointer<
    ffi.NativeFunction<gboolean Function(gpointer, ffi.Pointer<GTypeClass>)>>;

/// GTypeInterfaceCheckFunc:
/// @check_data: data passed to g_type_add_interface_check()
/// @g_iface: (type GObject.TypeInterface): the interface that has been
/// initialized
///
/// A callback called after an interface vtable is initialized.
///
/// See g_type_add_interface_check().
///
/// Since: 2.4
typedef GTypeInterfaceCheckFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer, gpointer)>>;

/// GValueTransform:
/// @src_value: Source value.
/// @dest_value: Target value.
///
/// The type of value transformation functions which can be registered with
/// g_value_register_transform_func().
///
/// @dest_value will be initialized to the correct destination type.
typedef GValueTransform = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>;

/// GParamFlags:
/// @G_PARAM_READABLE: the parameter is readable
/// @G_PARAM_WRITABLE: the parameter is writable
/// @G_PARAM_READWRITE: alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE
/// @G_PARAM_CONSTRUCT: the parameter will be set upon object construction
/// @G_PARAM_CONSTRUCT_ONLY: the parameter can only be set upon object construction
/// @G_PARAM_LAX_VALIDATION: upon parameter conversion (see g_param_value_convert())
/// strict validation is not required
/// @G_PARAM_STATIC_NAME: the string used as name when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_NICK: the string used as nick when constructing the
/// parameter is guaranteed to remain valid and
/// unmmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_BLURB: the string used as blurb when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_EXPLICIT_NOTIFY: calls to g_object_set_property() for this
/// property will not automatically result in a "notify" signal being
/// emitted: the implementation must call g_object_notify() themselves
/// in case the property actually changes.  Since: 2.42.
/// @G_PARAM_PRIVATE: internal
/// @G_PARAM_DEPRECATED: the parameter is deprecated and will be removed
/// in a future version. A warning will be generated if it is used
/// while running with G_ENABLE_DIAGNOSTIC=1.
/// Since 2.26
///
/// Through the #GParamFlags flag values, certain aspects of parameters
/// can be configured.
///
/// See also: %G_PARAM_STATIC_STRINGS
abstract class GParamFlags {
  static const int G_PARAM_READABLE = 1;
  static const int G_PARAM_WRITABLE = 2;
  static const int G_PARAM_READWRITE = 3;
  static const int G_PARAM_CONSTRUCT = 4;
  static const int G_PARAM_CONSTRUCT_ONLY = 8;
  static const int G_PARAM_LAX_VALIDATION = 16;
  static const int G_PARAM_STATIC_NAME = 32;
  static const int G_PARAM_PRIVATE = 32;
  static const int G_PARAM_STATIC_NICK = 64;
  static const int G_PARAM_STATIC_BLURB = 128;
  static const int G_PARAM_EXPLICIT_NOTIFY = 1073741824;
  static const int G_PARAM_DEPRECATED = -2147483648;
}

/// GParamSpec: (ref-func g_param_spec_ref_sink) (unref-func g_param_spec_unref) (set-value-func g_value_set_param) (get-value-func g_value_get_param)
/// @g_type_instance: private #GTypeInstance portion
/// @name: name of this parameter: always an interned string
/// @flags: #GParamFlags flags for this parameter
/// @value_type: the #GValue type for this parameter
/// @owner_type: #GType type that uses (introduces) this parameter
///
/// All other fields of the GParamSpec struct are private and
/// should not be used directly.
class _GParamSpec extends ffi.Struct {
  external GTypeInstance g_type_instance;

  external ffi.Pointer<gchar> name;

  @ffi.Int32()
  external int flags;

  @GType()
  external int value_type;

  @GType()
  external int owner_type;

  external ffi.Pointer<gchar> _nick;

  external ffi.Pointer<gchar> _blurb;

  external ffi.Pointer<GData> qdata;

  @guint()
  external int ref_count;

  @guint()
  external int param_id;
}

typedef GData = _GData;

class _GData extends ffi.Opaque {}

/// GParamSpecClass:
/// @g_type_class: the parent class
/// @value_type: the #GValue type for this parameter
/// @finalize: The instance finalization function (optional), should chain
/// up to the finalize method of the parent class.
/// @value_set_default: Resets a @value to the default value for this type
/// (recommended, the default is g_value_reset()), see
/// g_param_value_set_default().
/// @value_validate: Ensures that the contents of @value comply with the
/// specifications set out by this type (optional), see
/// g_param_value_validate().
/// @values_cmp: Compares @value1 with @value2 according to this type
/// (recommended, the default is memcmp()), see g_param_values_cmp().
/// @value_is_valid: Checks if contents of @value comply with the specifications
/// set out by this type, without modifying the value. This vfunc is optional.
/// If it isn't set, GObject will use @value_validate. Since 2.74
///
/// The class structure for the GParamSpec type.
/// Normally, GParamSpec classes are filled by
/// g_param_type_register_static().
class _GParamSpecClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @GType()
  external int value_type;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>> finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>>
      value_set_default;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>>
      value_validate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>> values_cmp;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>>
      value_is_valid;

  @ffi.Array.multi([3])
  external ffi.Array<gpointer> dummy;
}

typedef GParamSpec = _GParamSpec;

/// GParameter:
/// @name: the parameter name
/// @value: the parameter value
///
/// The GParameter struct is an auxiliary structure used
/// to hand parameter name/value pairs to g_object_newv().
///
/// Deprecated: 2.54: This type is not introspectable.
class _GParameter extends ffi.Struct {
  external ffi.Pointer<gchar> name;

  external GValue value;
}

class _GParamSpecPool extends ffi.Opaque {}

typedef GDestroyNotify
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer)>>;

/// GParamSpecTypeInfo:
/// @instance_size: Size of the instance (object) structure.
/// @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.
/// @instance_init: Location of the instance initialization function (optional).
/// @value_type: The #GType of values conforming to this #GParamSpec
/// @finalize: The instance finalization function (optional).
/// @value_set_default: Resets a @value to the default value for @pspec
/// (recommended, the default is g_value_reset()), see
/// g_param_value_set_default().
/// @value_validate: Ensures that the contents of @value comply with the
/// specifications set out by @pspec (optional), see
/// g_param_value_validate().
/// @values_cmp: Compares @value1 with @value2 according to @pspec
/// (recommended, the default is memcmp()), see g_param_values_cmp().
///
/// This structure is used to provide the type system with the information
/// required to initialize and destruct (finalize) a parameter's class and
/// instances thereof.
///
/// The initialized structure is passed to the g_param_type_register_static()
/// The type system will perform a deep copy of this structure, so its memory
/// does not need to be persistent across invocation of
/// g_param_type_register_static().
class _GParamSpecTypeInfo extends ffi.Struct {
  @guint16()
  external int instance_size;

  @guint16()
  external int n_preallocs;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>>
      instance_init;

  @GType()
  external int value_type;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>> finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>>
      value_set_default;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>>
      value_validate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>> values_cmp;
}

typedef GParamSpecTypeInfo = _GParamSpecTypeInfo;
typedef GParamSpecPool = _GParamSpecPool;
typedef GList = _GList;

class _GList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GList1> next;

  external ffi.Pointer<GList1> prev;
}

typedef GList1 = _GList;

/// GClosure:
/// @in_marshal: Indicates whether the closure is currently being invoked with
/// g_closure_invoke()
/// @is_invalid: Indicates whether the closure has been invalidated by
/// g_closure_invalidate()
///
/// A #GClosure represents a callback supplied by the programmer.
class _GClosure extends ffi.Opaque {}

class _GClosureNotifyData extends ffi.Struct {
  external gpointer data;

  external GClosureNotify notify;
}

/// GClosureNotify:
/// @data: data specified when registering the notification callback
/// @closure: the #GClosure on which the notification is emitted
///
/// The type used for the various notification callbacks which can be registered
/// on closures.
typedef GClosureNotify = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<GClosure>)>>;
typedef GClosure = _GClosure;

class _GCClosure extends ffi.Opaque {}

/// GCallback:
///
/// The type used for callback functions in structure definitions and function
/// signatures.
///
/// This doesn't mean that all callback functions must take no  parameters and
/// return void. The required signature of a callback function is determined by
/// the context in which is used (e.g. the signal to which it is connected).
///
/// Use G_CALLBACK() to cast the callback function to a #GCallback.
typedef GCallback = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

/// GClosureMarshal:
/// @closure: the #GClosure to which the marshaller belongs
/// @return_value: (nullable): a #GValue to store the return
/// value. May be %NULL if the callback of @closure doesn't return a
/// value.
/// @n_param_values: the length of the @param_values array
/// @param_values: (array length=n_param_values): an array of
/// #GValues holding the arguments on which to invoke the
/// callback of @closure
/// @invocation_hint: (nullable): the invocation hint given as the
/// last argument to g_closure_invoke()
/// @user_data: (nullable): additional data specified when
/// registering the marshaller, see g_closure_set_marshal() and
/// g_closure_set_meta_marshal()
///
/// The type used for marshaller functions.
typedef GClosureMarshal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, guint,
            ffi.Pointer<GValue>, gpointer, gpointer)>>;

class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// GSignalQuery:
/// @signal_id: The signal id of the signal being queried, or 0 if the
/// signal to be queried was unknown.
/// @signal_name: The signal name.
/// @itype: The interface/instance type that this signal can be emitted for.
/// @signal_flags: The signal flags as passed in to g_signal_new().
/// @return_type: The return type for user callbacks.
/// @n_params: The number of parameters that user callbacks take.
/// @param_types: (array length=n_params): The individual parameter types for
/// user callbacks, note that the effective callback signature is:
/// |[<!-- language="C" -->
/// @return_type callback (#gpointer     data1,
/// [param_types param_names,]
/// gpointer     data2);
/// ]|
///
/// A structure holding in-depth information for a specific signal.
///
/// See also: g_signal_query()
class _GSignalQuery extends ffi.Struct {
  @guint()
  external int signal_id;

  external ffi.Pointer<gchar> signal_name;

  @GType()
  external int itype;

  @ffi.Int32()
  external int signal_flags;

  @GType()
  external int return_type;

  @guint()
  external int n_params;

  external ffi.Pointer<GType> param_types;
}

/// GSignalFlags:
/// @G_SIGNAL_RUN_FIRST: Invoke the object method handler in the first emission stage.
/// @G_SIGNAL_RUN_LAST: Invoke the object method handler in the third emission stage.
/// @G_SIGNAL_RUN_CLEANUP: Invoke the object method handler in the last emission stage.
/// @G_SIGNAL_NO_RECURSE: Signals being emitted for an object while currently being in
/// emission for this very object will not be emitted recursively,
/// but instead cause the first emission to be restarted.
/// @G_SIGNAL_DETAILED: This signal supports "::detail" appendices to the signal name
/// upon handler connections and emissions.
/// @G_SIGNAL_ACTION: Action signals are signals that may freely be emitted on alive
/// objects from user code via g_signal_emit() and friends, without
/// the need of being embedded into extra code that performs pre or
/// post emission adjustments on the object. They can also be thought
/// of as object methods which can be called generically by
/// third-party code.
/// @G_SIGNAL_NO_HOOKS: No emissions hooks are supported for this signal.
/// @G_SIGNAL_MUST_COLLECT: Varargs signal emission will always collect the
/// arguments, even if there are no signal handlers connected.  Since 2.30.
/// @G_SIGNAL_DEPRECATED: The signal is deprecated and will be removed
/// in a future version. A warning will be generated if it is connected while
/// running with G_ENABLE_DIAGNOSTIC=1.  Since 2.32.
/// @G_SIGNAL_ACCUMULATOR_FIRST_RUN: Only used in #GSignalAccumulator accumulator
/// functions for the #GSignalInvocationHint::run_type field to mark the first
/// call to the accumulator function for a signal emission.  Since 2.68.
///
/// The signal flags are used to specify a signal's behaviour.
abstract class GSignalFlags {
  static const int G_SIGNAL_RUN_FIRST = 1;
  static const int G_SIGNAL_RUN_LAST = 2;
  static const int G_SIGNAL_RUN_CLEANUP = 4;
  static const int G_SIGNAL_NO_RECURSE = 8;
  static const int G_SIGNAL_DETAILED = 16;
  static const int G_SIGNAL_ACTION = 32;
  static const int G_SIGNAL_NO_HOOKS = 64;
  static const int G_SIGNAL_MUST_COLLECT = 128;
  static const int G_SIGNAL_DEPRECATED = 256;
  static const int G_SIGNAL_ACCUMULATOR_FIRST_RUN = 131072;
}

/// GSignalInvocationHint:
/// @signal_id: The signal id of the signal invoking the callback
/// @detail: The detail passed on for this emission
/// @run_type: The stage the signal emission is currently in, this
/// field will contain one of %G_SIGNAL_RUN_FIRST,
/// %G_SIGNAL_RUN_LAST or %G_SIGNAL_RUN_CLEANUP and %G_SIGNAL_ACCUMULATOR_FIRST_RUN.
/// %G_SIGNAL_ACCUMULATOR_FIRST_RUN is only set for the first run of the accumulator
/// function for a signal emission.
///
/// The #GSignalInvocationHint structure is used to pass on additional information
/// to callbacks during a signal emission.
class _GSignalInvocationHint extends ffi.Struct {
  @guint()
  external int signal_id;

  @GQuark()
  external int detail;

  @ffi.Int32()
  external int run_type;
}

/// GConnectFlags:
/// @G_CONNECT_DEFAULT: Default behaviour (no special flags). Since: 2.74
/// @G_CONNECT_AFTER: If set, the handler should be called after the
/// default handler of the signal. Normally, the handler is called before
/// the default handler.
/// @G_CONNECT_SWAPPED: If set, the instance and data should be swapped when
/// calling the handler; see g_signal_connect_swapped() for an example.
///
/// The connection flags are used to specify the behaviour of a signal's
/// connection.
abstract class GConnectFlags {
  static const int G_CONNECT_DEFAULT = 0;
  static const int G_CONNECT_AFTER = 1;
  static const int G_CONNECT_SWAPPED = 2;
}

/// GSignalMatchType:
/// @G_SIGNAL_MATCH_ID: The signal id must be equal.
/// @G_SIGNAL_MATCH_DETAIL: The signal detail must be equal.
/// @G_SIGNAL_MATCH_CLOSURE: The closure must be the same.
/// @G_SIGNAL_MATCH_FUNC: The C closure callback must be the same.
/// @G_SIGNAL_MATCH_DATA: The closure data must be the same.
/// @G_SIGNAL_MATCH_UNBLOCKED: Only unblocked signals may be matched.
///
/// The match types specify what g_signal_handlers_block_matched(),
/// g_signal_handlers_unblock_matched() and g_signal_handlers_disconnect_matched()
/// match signals by.
abstract class GSignalMatchType {
  static const int G_SIGNAL_MATCH_ID = 1;
  static const int G_SIGNAL_MATCH_DETAIL = 2;
  static const int G_SIGNAL_MATCH_CLOSURE = 4;
  static const int G_SIGNAL_MATCH_FUNC = 8;
  static const int G_SIGNAL_MATCH_DATA = 16;
  static const int G_SIGNAL_MATCH_UNBLOCKED = 32;
}

/// GSignalAccumulator:
/// @ihint: Signal invocation hint, see #GSignalInvocationHint.
/// @return_accu: Accumulator to collect callback return values in, this
/// is the return value of the current signal emission.
/// @handler_return: A #GValue holding the return value of the signal handler.
/// @user_data: Callback data that was specified when creating the signal.
///
/// The signal accumulator is a special callback function that can be used
/// to collect return values of the various callbacks that are called
/// during a signal emission.
///
/// The signal accumulator is specified at signal creation time, if it is
/// left %NULL, no accumulation of callback return values is performed.
/// The return value of signal emissions is then the value returned by the
/// last callback.
///
/// Returns: The accumulator function returns whether the signal emission
/// should be aborted. Returning %TRUE will continue with
/// the signal emission. Returning %FALSE will abort the current emission.
/// Since 2.62, returning %FALSE will skip to the CLEANUP stage. In this case,
/// emission will occur as normal in the CLEANUP stage and the handler's
/// return value will be accumulated.
typedef GSignalAccumulator = ffi.Pointer<
    ffi.NativeFunction<
        gboolean Function(ffi.Pointer<GSignalInvocationHint>,
            ffi.Pointer<GValue>, ffi.Pointer<GValue>, gpointer)>>;
typedef GSignalInvocationHint = _GSignalInvocationHint;

/// GSignalCMarshaller:
///
/// This is the signature of marshaller functions, required to marshall
/// arrays of parameter values to signal emissions into C language callback
/// invocations.
///
/// It is merely an alias to #GClosureMarshal since the #GClosure mechanism
/// takes over responsibility of actual function invocation for the signal
/// system.
typedef GSignalCMarshaller = GClosureMarshal;

/// GSignalCVaMarshaller:
///
/// This is the signature of va_list marshaller functions, an optional
/// marshaller that can be used in some situations to avoid
/// marshalling the signal argument into GValues.
typedef GSignalCVaMarshaller = GVaClosureMarshal;

/// GVaClosureMarshal:
/// @closure: the #GClosure to which the marshaller belongs
/// @return_value: (nullable): a #GValue to store the return
/// value. May be %NULL if the callback of @closure doesn't return a
/// value.
/// @instance: (type GObject.TypeInstance): the instance on which the closure is
/// invoked.
/// @args: va_list of arguments to be passed to the closure.
/// @marshal_data: (nullable): additional data specified when
/// registering the marshaller, see g_closure_set_marshal() and
/// g_closure_set_meta_marshal()
/// @n_params: the length of the @param_types array
/// @param_types: (array length=n_params): the #GType of each argument from
/// @args.
///
/// This is the signature of va_list marshaller functions, an optional
/// marshaller that can be used in some situations to avoid
/// marshalling the signal argument into GValues.
typedef GVaClosureMarshal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<GClosure>,
            ffi.Pointer<GValue>,
            gpointer,
            ffi.Pointer<__va_list_tag>,
            gpointer,
            ffi.Int,
            ffi.Pointer<GType>)>>;
typedef GSignalQuery = _GSignalQuery;

/// GSignalEmissionHook:
/// @ihint: Signal invocation hint, see #GSignalInvocationHint.
/// @n_param_values: the number of parameters to the function, including
/// the instance on which the signal was emitted.
/// @param_values: (array length=n_param_values): the instance on which
/// the signal was emitted, followed by the parameters of the emission.
/// @user_data: user data associated with the hook.
///
/// A simple function pointer to get invoked when the signal is emitted.
///
/// Emission hooks allow you to tie a hook to the signal type, so that it will
/// trap all emissions of that signal, from any object.
///
/// You may not attach these to signals created with the %G_SIGNAL_NO_HOOKS flag.
///
/// Returns: whether it wants to stay connected. If it returns %FALSE, the signal
/// hook is disconnected (and destroyed).
typedef GSignalEmissionHook = ffi.Pointer<
    ffi.NativeFunction<
        gboolean Function(ffi.Pointer<GSignalInvocationHint>, guint,
            ffi.Pointer<GValue>, gpointer)>>;

/// GBoxedCopyFunc:
/// @boxed: (not nullable): The boxed structure to be copied.
///
/// This function is provided by the user and should produce a copy
/// of the passed in boxed structure.
///
/// Returns: (not nullable): The newly created copy of the boxed structure.
typedef GBoxedCopyFunc
    = ffi.Pointer<ffi.NativeFunction<gpointer Function(gpointer)>>;

/// GBoxedFreeFunc:
/// @boxed: (not nullable): The boxed structure to be freed.
///
/// This function is provided by the user and should free the boxed
/// structure passed.
typedef GBoxedFreeFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer)>>;

/// GObject:
///
/// The base object type.
///
/// All the fields in the `GObject` structure are private to the implementation
/// and should never be accessed directly.
///
/// Since GLib 2.72, all #GObjects are guaranteed to be aligned to at least the
/// alignment of the largest basic GLib type (typically this is #guint64 or
/// #gdouble). If you need larger alignment for an element in a #GObject, you
/// should allocate it on the heap (aligned), or arrange for your #GObject to be
/// appropriately padded. This guarantee applies to the #GObject (or derived)
/// struct, the #GObjectClass (or derived) struct, and any private data allocated
/// by G_ADD_PRIVATE().
class _GObject extends ffi.Struct {
  external GTypeInstance g_type_instance;

  @guint()
  external int ref_count;

  external ffi.Pointer<GData> qdata;
}

/// GObjectClass:
/// @g_type_class: the parent class
/// @constructor: the @constructor function is called by g_object_new () to
/// complete the object initialization after all the construction properties are
/// set. The first thing a @constructor implementation must do is chain up to the
/// @constructor of the parent class. Overriding @constructor should be rarely
/// needed, e.g. to handle construct properties, or to implement singletons.
/// @set_property: the generic setter for all properties of this type. Should be
/// overridden for every type with properties. If implementations of
/// @set_property don't emit property change notification explicitly, this will
/// be done implicitly by the type system. However, if the notify signal is
/// emitted explicitly, the type system will not emit it a second time.
/// @get_property: the generic getter for all properties of this type. Should be
/// overridden for every type with properties.
/// @dispose: the @dispose function is supposed to drop all references to other
/// objects, but keep the instance otherwise intact, so that client method
/// invocations still work. It may be run multiple times (due to reference
/// loops). Before returning, @dispose should chain up to the @dispose method
/// of the parent class.
/// @finalize: instance finalization function, should finish the finalization of
/// the instance begun in @dispose and chain up to the @finalize method of the
/// parent class.
/// @dispatch_properties_changed: emits property change notification for a bunch
/// of properties. Overriding @dispatch_properties_changed should be rarely
/// needed.
/// @notify: the class closure for the notify signal
/// @constructed: the @constructed function is called by g_object_new() as the
/// final step of the object creation process.  At the point of the call, all
/// construction properties have been set on the object.  The purpose of this
/// call is to allow for object initialisation steps that can only be performed
/// after construction properties have been set.  @constructed implementors
/// should chain up to the @constructed call of their parent class to allow it
/// to complete its initialisation.
///
/// The class structure for the GObject type.
///
/// |[<!-- language="C" -->
/// // Example of implementing a singleton using a constructor.
/// static MySingleton *the_singleton = NULL;
///
/// static GObject*
/// my_singleton_constructor (GType                  type,
/// guint                  n_construct_params,
/// GObjectConstructParam *construct_params)
/// {
/// GObject *object;
///
/// if (!the_singleton)
/// {
/// object = G_OBJECT_CLASS (parent_class)->constructor (type,
/// n_construct_params,
/// construct_params);
/// the_singleton = MY_SINGLETON (object);
/// }
/// else
/// object = g_object_ref (G_OBJECT (the_singleton));
///
/// return object;
/// }
/// ]|
class _GObjectClass extends ffi.Struct {
  external GTypeClass g_type_class;

  external ffi.Pointer<GSList> construct_properties;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              GType, guint, ffi.Pointer<GObjectConstructParam>)>> constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, guint, ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>> set_property;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, guint, ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>> get_property;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>
      dispose;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObject>, guint,
                  ffi.Pointer<ffi.Pointer<GParamSpec>>)>>
      dispatch_properties_changed;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<GParamSpec>)>>
      notify;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>
      constructed;

  @gsize()
  external int flags;

  @gsize()
  external int n_construct_properties;

  external gpointer pspecs;

  @gsize()
  external int n_pspecs;

  @ffi.Array.multi([3])
  external ffi.Array<gpointer> pdummy;
}

typedef GSList = _GSList;

class _GSList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GSList1> next;
}

typedef GSList1 = _GSList;
typedef GObject = _GObject;
typedef GObjectConstructParam = _GObjectConstructParam;

/// GObjectConstructParam:
/// @pspec: the #GParamSpec of the construct parameter
/// @value: the value to set the parameter to
///
/// The GObjectConstructParam struct is an auxiliary structure used to hand
/// #GParamSpec/#GValue pairs to the @constructor of a #GObjectClass.
class _GObjectConstructParam extends ffi.Struct {
  external ffi.Pointer<GParamSpec> pspec;

  external ffi.Pointer<GValue> value;
}

typedef GObjectClass = _GObjectClass;
typedef GParameter = _GParameter;

/// GWeakNotify:
/// @data: data that was provided when the weak reference was established
/// @where_the_object_was: the object being disposed
///
/// A #GWeakNotify function can be added to an object as a callback that gets
/// triggered when the object is finalized.
///
/// Since the object is already being disposed when the #GWeakNotify is called,
/// there's not much you could do with the object, apart from e.g. using its
/// address as hash-index or the like.
///
/// In particular, this means it’s invalid to call g_object_ref(),
/// g_weak_ref_init(), g_weak_ref_set(), g_object_add_toggle_ref(),
/// g_object_weak_ref(), g_object_add_weak_pointer() or any function which calls
/// them on the object from this callback.
typedef GWeakNotify = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<GObject>)>>;

/// GToggleNotify:
/// @data: Callback data passed to g_object_add_toggle_ref()
/// @object: The object on which g_object_add_toggle_ref() was called.
/// @is_last_ref: %TRUE if the toggle reference is now the
/// last reference to the object. %FALSE if the toggle
/// reference was the last reference and there are now other
/// references.
///
/// A callback function used for notification when the state
/// of a toggle reference changes.
///
/// See also: g_object_add_toggle_ref()
typedef GToggleNotify = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(gpointer, ffi.Pointer<GObject>, gboolean)>>;
typedef GDuplicateFunc
    = ffi.Pointer<ffi.NativeFunction<gpointer Function(gpointer, gpointer)>>;

class GWeakRef extends ffi.Struct {
  external UnnamedUnion2 priv;
}

class UnnamedUnion2 extends ffi.Union {
  external gpointer p;
}

class _GBinding extends ffi.Opaque {}

/// GBindingFlags:
/// @G_BINDING_DEFAULT: The default binding; if the source property
/// changes, the target property is updated with its value.
/// @G_BINDING_BIDIRECTIONAL: Bidirectional binding; if either the
/// property of the source or the property of the target changes,
/// the other is updated.
/// @G_BINDING_SYNC_CREATE: Synchronize the values of the source and
/// target properties when creating the binding; the direction of
/// the synchronization is always from the source to the target.
/// @G_BINDING_INVERT_BOOLEAN: If the two properties being bound are
/// booleans, setting one to %TRUE will result in the other being
/// set to %FALSE and vice versa. This flag will only work for
/// boolean properties, and cannot be used when passing custom
/// transformation functions to g_object_bind_property_full().
///
/// Flags to be passed to g_object_bind_property() or
/// g_object_bind_property_full().
///
/// This enumeration can be extended at later date.
///
/// Since: 2.26
abstract class GBindingFlags {
  static const int G_BINDING_DEFAULT = 0;
  static const int G_BINDING_BIDIRECTIONAL = 1;
  static const int G_BINDING_SYNC_CREATE = 2;
  static const int G_BINDING_INVERT_BOOLEAN = 4;
}

/// GBinding:
///
/// GBinding is an opaque structure whose members
/// cannot be accessed directly.
///
/// Since: 2.26
typedef GBinding = _GBinding;

/// GBindingTransformFunc:
/// @binding: a #GBinding
/// @from_value: the #GValue containing the value to transform
/// @to_value: the #GValue in which to store the transformed value
/// @user_data: data passed to the transform function
///
/// A function to be called to transform @from_value to @to_value.
///
/// If this is the @transform_to function of a binding, then @from_value
/// is the @source_property on the @source object, and @to_value is the
/// @target_property on the @target object. If this is the
/// @transform_from function of a %G_BINDING_BIDIRECTIONAL binding,
/// then those roles are reversed.
///
/// Returns: %TRUE if the transformation was successful, and %FALSE
/// otherwise
///
/// Since: 2.26
typedef GBindingTransformFunc = ffi.Pointer<
    ffi.NativeFunction<
        gboolean Function(ffi.Pointer<GBinding>, ffi.Pointer<GValue>,
            ffi.Pointer<GValue>, gpointer)>>;

class _GBindingGroup extends ffi.Opaque {}

/// GBindingGroup:
///
/// GBindingGroup is an opaque structure whose members
/// cannot be accessed directly.
///
/// Since: 2.72
typedef GBindingGroup = _GBindingGroup;

/// GEnumClass:
/// @g_type_class: the parent class
/// @minimum: the smallest possible value.
/// @maximum: the largest possible value.
/// @n_values: the number of possible values.
/// @values: an array of #GEnumValue structs describing the
/// individual values.
///
/// The class of an enumeration type holds information about its
/// possible values.
class _GEnumClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @gint()
  external int minimum;

  @gint()
  external int maximum;

  @guint()
  external int n_values;

  external ffi.Pointer<GEnumValue> values;
}

typedef GEnumValue = _GEnumValue;

/// GEnumValue:
/// @value: the enum value
/// @value_name: the name of the value
/// @value_nick: the nickname of the value
///
/// A structure which contains a single enum value, its name, and its
/// nickname.
class _GEnumValue extends ffi.Struct {
  @gint()
  external int value;

  external ffi.Pointer<gchar> value_name;

  external ffi.Pointer<gchar> value_nick;
}

/// GFlagsClass:
/// @g_type_class: the parent class
/// @mask: a mask covering all possible values.
/// @n_values: the number of possible values.
/// @values: an array of #GFlagsValue structs describing the
/// individual values.
///
/// The class of a flags type holds information about its
/// possible values.
class _GFlagsClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @guint()
  external int mask;

  @guint()
  external int n_values;

  external ffi.Pointer<GFlagsValue> values;
}

typedef GFlagsValue = _GFlagsValue;

/// GFlagsValue:
/// @value: the flags value
/// @value_name: the name of the value
/// @value_nick: the nickname of the value
///
/// A structure which contains a single flags value, its name, and its
/// nickname.
class _GFlagsValue extends ffi.Struct {
  @guint()
  external int value;

  external ffi.Pointer<gchar> value_name;

  external ffi.Pointer<gchar> value_nick;
}

typedef GEnumClass = _GEnumClass;
typedef GFlagsClass = _GFlagsClass;

/// GParamSpecChar:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for character properties.
class _GParamSpecChar extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint8()
  external int minimum;

  @gint8()
  external int maximum;

  @gint8()
  external int default_value;
}

typedef gint8 = ffi.SignedChar;

/// GParamSpecUChar:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned character properties.
class _GParamSpecUChar extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint8()
  external int minimum;

  @guint8()
  external int maximum;

  @guint8()
  external int default_value;
}

typedef guint8 = ffi.UnsignedChar;

/// GParamSpecBoolean:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for boolean properties.
class _GParamSpecBoolean extends ffi.Struct {
  external GParamSpec parent_instance;

  @gboolean()
  external int default_value;
}

/// GParamSpecInt:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for integer properties.
class _GParamSpecInt extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint()
  external int minimum;

  @gint()
  external int maximum;

  @gint()
  external int default_value;
}

/// GParamSpecUInt:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned integer properties.
class _GParamSpecUInt extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint()
  external int minimum;

  @guint()
  external int maximum;

  @guint()
  external int default_value;
}

/// GParamSpecLong:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for long integer properties.
class _GParamSpecLong extends ffi.Struct {
  external GParamSpec parent_instance;

  @glong()
  external int minimum;

  @glong()
  external int maximum;

  @glong()
  external int default_value;
}

/// GParamSpecULong:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned long integer properties.
class _GParamSpecULong extends ffi.Struct {
  external GParamSpec parent_instance;

  @gulong()
  external int minimum;

  @gulong()
  external int maximum;

  @gulong()
  external int default_value;
}

/// GParamSpecInt64:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for 64bit integer properties.
class _GParamSpecInt64 extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint64()
  external int minimum;

  @gint64()
  external int maximum;

  @gint64()
  external int default_value;
}

/// GParamSpecUInt64:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned 64bit integer properties.
class _GParamSpecUInt64 extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint64()
  external int minimum;

  @guint64()
  external int maximum;

  @guint64()
  external int default_value;
}

/// GParamSpecUnichar:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unichar (unsigned integer) properties.
class _GParamSpecUnichar extends ffi.Struct {
  external GParamSpec parent_instance;

  @gunichar()
  external int default_value;
}

/// gunichar:
///
/// A type which can hold any UTF-32 or UCS-4 character code,
/// also known as a Unicode code point.
///
/// If you want to produce the UTF-8 representation of a #gunichar,
/// use g_ucs4_to_utf8(). See also g_utf8_to_ucs4() for the reverse
/// process.
///
/// To print/scan values of this type as integer, use
/// %G_GINT32_MODIFIER and/or %G_GUINT32_FORMAT.
///
/// The notation to express a Unicode code point in running text is
/// as a hexadecimal number with four to six digits and uppercase
/// letters, prefixed by the string "U+". Leading zeros are omitted,
/// unless the code point would have fewer than four hexadecimal digits.
/// For example, "U+0041 LATIN CAPITAL LETTER A". To print a code point
/// in the U+-notation, use the format string "U+\%04"G_GINT32_FORMAT"X".
/// To scan, use the format string "U+\%06"G_GINT32_FORMAT"X".
///
/// |[
/// gunichar c;
/// sscanf ("U+0041", "U+%06"G_GINT32_FORMAT"X", &amp;c)
/// g_print ("Read U+%04"G_GINT32_FORMAT"X", c);
/// ]|
typedef gunichar = guint32;

/// GParamSpecEnum:
/// @parent_instance: private #GParamSpec portion
/// @enum_class: the #GEnumClass for the enum
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for enum
/// properties.
class _GParamSpecEnum extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GEnumClass> enum_class;

  @gint()
  external int default_value;
}

/// GParamSpecFlags:
/// @parent_instance: private #GParamSpec portion
/// @flags_class: the #GFlagsClass for the flags
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for flags
/// properties.
class _GParamSpecFlags extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GFlagsClass> flags_class;

  @guint()
  external int default_value;
}

/// GParamSpecFloat:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
/// @epsilon: values closer than @epsilon will be considered identical
/// by g_param_values_cmp(); the default value is 1e-30.
///
/// A #GParamSpec derived structure that contains the meta data for float properties.
class _GParamSpecFloat extends ffi.Struct {
  external GParamSpec parent_instance;

  @gfloat()
  external double minimum;

  @gfloat()
  external double maximum;

  @gfloat()
  external double default_value;

  @gfloat()
  external double epsilon;
}

/// GParamSpecDouble:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
/// @epsilon: values closer than @epsilon will be considered identical
/// by g_param_values_cmp(); the default value is 1e-90.
///
/// A #GParamSpec derived structure that contains the meta data for double properties.
class _GParamSpecDouble extends ffi.Struct {
  external GParamSpec parent_instance;

  @gdouble()
  external double minimum;

  @gdouble()
  external double maximum;

  @gdouble()
  external double default_value;

  @gdouble()
  external double epsilon;
}

/// GParamSpecString:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
/// @cset_first: a string containing the allowed values for the first byte
/// @cset_nth: a string containing the allowed values for the subsequent bytes
/// @substitutor: the replacement byte for bytes which don't match @cset_first or @cset_nth.
/// @null_fold_if_empty: replace empty string by %NULL
/// @ensure_non_null: replace %NULL strings by an empty string
///
/// A #GParamSpec derived structure that contains the meta data for string
/// properties.
class _GParamSpecString extends ffi.Opaque {}

/// GParamSpecParam:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for %G_TYPE_PARAM
/// properties.
class _GParamSpecParam extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecBoxed:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for boxed properties.
class _GParamSpecBoxed extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecPointer:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for pointer properties.
class _GParamSpecPointer extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecValueArray:
/// @parent_instance: private #GParamSpec portion
/// @element_spec: a #GParamSpec describing the elements contained in arrays of this property, may be %NULL
/// @fixed_n_elements: if greater than 0, arrays of this property will always have this many elements
///
/// A #GParamSpec derived structure that contains the meta data for #GValueArray properties.
class _GParamSpecValueArray extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GParamSpec> element_spec;

  @guint()
  external int fixed_n_elements;
}

/// GParamSpecObject:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for object properties.
class _GParamSpecObject extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecOverride:
///
/// A #GParamSpec derived structure that redirects operations to
/// other types of #GParamSpec.
///
/// All operations other than getting or setting the value are redirected,
/// including accessing the nick and blurb, validating a value, and so
/// forth.
///
/// See g_param_spec_get_redirect_target() for retrieving the overridden
/// property. #GParamSpecOverride is used in implementing
/// g_object_class_override_property(), and will not be directly useful
/// unless you are implementing a new base type similar to GObject.
///
/// Since: 2.4
class _GParamSpecOverride extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GParamSpec> overridden;
}

/// GParamSpecGType:
/// @parent_instance: private #GParamSpec portion
/// @is_a_type: a #GType whose subtypes can occur as values
///
/// A #GParamSpec derived structure that contains the meta data for #GType properties.
///
/// Since: 2.10
class _GParamSpecGType extends ffi.Struct {
  external GParamSpec parent_instance;

  @GType()
  external int is_a_type;
}

/// GParamSpecVariant:
/// @parent_instance: private #GParamSpec portion
/// @type: a #GVariantType, or %NULL
/// @default_value: a #GVariant, or %NULL
///
/// A #GParamSpec derived structure that contains the meta data for #GVariant properties.
///
/// When comparing values with g_param_values_cmp(), scalar values with the same
/// type will be compared with g_variant_compare(). Other non-%NULL variants will
/// be checked for equality with g_variant_equal(), and their sort order is
/// otherwise undefined. %NULL is ordered before non-%NULL variants. Two %NULL
/// values compare equal.
///
/// Since: 2.26
class _GParamSpecVariant extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GVariantType> type;

  external ffi.Pointer<GVariant> default_value;

  @ffi.Array.multi([4])
  external ffi.Array<gpointer> padding;
}

/// GVariantType:
///
/// A type in the GVariant type system.
///
/// Two types may not be compared by value; use g_variant_type_equal() or
/// g_variant_type_is_subtype_of().  May be copied using
/// g_variant_type_copy() and freed using g_variant_type_free().
typedef GVariantType = _GVariantType;

class _GVariantType extends ffi.Opaque {}

typedef GVariant = _GVariant;

class _GVariant extends ffi.Opaque {}

class _GSignalGroup extends ffi.Opaque {}

/// GSignalGroup:
///
/// #GSignalGroup is an opaque structure whose members
/// cannot be accessed directly.
///
/// Since: 2.72
typedef GSignalGroup = _GSignalGroup;

/// GSource:
///
/// The `GSource` struct is an opaque data type
/// representing an event source.
typedef GSource = _GSource;

class _GSource extends ffi.Struct {
  external gpointer callback_data;

  external ffi.Pointer<GSourceCallbackFuncs> callback_funcs;

  external ffi.Pointer<GSourceFuncs> source_funcs;

  @guint()
  external int ref_count;

  external ffi.Pointer<GMainContext> context;

  @gint()
  external int priority;

  @guint()
  external int flags;

  @guint()
  external int source_id;

  external ffi.Pointer<GSList> poll_fds;

  external ffi.Pointer<GSource1> prev;

  external ffi.Pointer<GSource1> next;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<GSourcePrivate> priv;
}

/// GSourceCallbackFuncs:
/// @ref: Called when a reference is added to the callback object
/// @unref: Called when a reference to the callback object is dropped
/// @get: Called to extract the callback function and data from the
/// callback object.
///
/// The `GSourceCallbackFuncs` struct contains
/// functions for managing callback objects.
typedef GSourceCallbackFuncs = _GSourceCallbackFuncs;

class _GSourceCallbackFuncs extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer)>> ref;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer)>> unref;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(gpointer, ffi.Pointer<GSource1>,
              ffi.Pointer<GSourceFunc>, ffi.Pointer<gpointer>)>> get1;
}

/// GSource:
///
/// The `GSource` struct is an opaque data type
/// representing an event source.
typedef GSource1 = _GSource;

/// GSourceFunc:
/// @user_data: data passed to the function, set when the source was
/// created with one of the above functions
///
/// Specifies the type of function passed to g_timeout_add(),
/// g_timeout_add_full(), g_idle_add(), and g_idle_add_full().
///
/// When calling g_source_set_callback(), you may need to cast a function of a
/// different type to this type. Use G_SOURCE_FUNC() to avoid warnings about
/// incompatible function types.
///
/// Returns: %FALSE if the source should be removed. %G_SOURCE_CONTINUE and
/// %G_SOURCE_REMOVE are more memorable names for the return value.
typedef GSourceFunc
    = ffi.Pointer<ffi.NativeFunction<gboolean Function(gpointer)>>;

/// GSourceFuncs:
/// @prepare: Called before all the file descriptors are polled. If the
/// source can determine that it is ready here (without waiting for the
/// results of the poll() call) it should return %TRUE. It can also return
/// a @timeout_ value which should be the maximum timeout (in milliseconds)
/// which should be passed to the poll() call. The actual timeout used will
/// be -1 if all sources returned -1, or it will be the minimum of all
/// the @timeout_ values returned which were >= 0.  Since 2.36 this may
/// be %NULL, in which case the effect is as if the function always returns
/// %FALSE with a timeout of -1.  If @prepare returns a
/// timeout and the source also has a ready time set, then the
/// lower of the two will be used.
/// @check: Called after all the file descriptors are polled. The source
/// should return %TRUE if it is ready to be dispatched. Note that some
/// time may have passed since the previous prepare function was called,
/// so the source should be checked again here.  Since 2.36 this may
/// be %NULL, in which case the effect is as if the function always returns
/// %FALSE.
/// @dispatch: Called to dispatch the event source, after it has returned
/// %TRUE in either its @prepare or its @check function, or if a ready time
/// has been reached. The @dispatch function receives a callback function and
/// user data. The callback function may be %NULL if the source was never
/// connected to a callback using g_source_set_callback(). The @dispatch
/// function should call the callback function with @user_data and whatever
/// additional parameters are needed for this type of event source. The
/// return value of the @dispatch function should be %G_SOURCE_REMOVE if the
/// source should be removed or %G_SOURCE_CONTINUE to keep it.
/// @finalize: Called when the source is finalized. At this point, the source
/// will have been destroyed, had its callback cleared, and have been removed
/// from its #GMainContext, but it will still have its final reference count,
/// so methods can be called on it from within this function.
///
/// The `GSourceFuncs` struct contains a table of
/// functions used to handle event sources in a generic manner.
///
/// For idle sources, the prepare and check functions always return %TRUE
/// to indicate that the source is always ready to be processed. The prepare
/// function also returns a timeout value of 0 to ensure that the poll() call
/// doesn't block (since that would be time wasted which could have been spent
/// running the idle function).
///
/// For timeout sources, the prepare and check functions both return %TRUE
/// if the timeout interval has expired. The prepare function also returns
/// a timeout value to ensure that the poll() call doesn't block too long
/// and miss the next timeout.
///
/// For file descriptor sources, the prepare function typically returns %FALSE,
/// since it must wait until poll() has been called before it knows whether
/// any events need to be processed. It sets the returned timeout to -1 to
/// indicate that it doesn't mind how long the poll() call blocks. In the
/// check function, it tests the results of the poll() call to see if the
/// required condition has been met, and returns %TRUE if so.
typedef GSourceFuncs = _GSourceFuncs;

class _GSourceFuncs extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSource1>, ffi.Pointer<gint>)>> prepare;

  external ffi
          .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSource1>)>>
      check;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GSource1>, GSourceFunc, gpointer)>>
      dispatch;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource1>)>>
      finalize;

  external GSourceFunc closure_callback;

  external GSourceDummyMarshal closure_marshal;
}

/// GSourceDummyMarshal:
///
/// This is just a placeholder for #GClosureMarshal,
/// which cannot be used here for dependency reasons.
typedef GSourceDummyMarshal
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

/// GMainContext:
///
/// The `GMainContext` struct is an opaque data
/// type representing a set of sources to be handled in a main loop.
typedef GMainContext = _GMainContext;

class _GMainContext extends ffi.Opaque {}

typedef GSourcePrivate = _GSourcePrivate;

class _GSourcePrivate extends ffi.Opaque {}

/// GTypeModule:
/// @name: the name of the module
///
/// The members of the GTypeModule structure should not
/// be accessed directly, except for the @name field.
class _GTypeModule extends ffi.Struct {
  external GObject parent_instance;

  @guint()
  external int use_count;

  external ffi.Pointer<GSList> type_infos;

  external ffi.Pointer<GSList> interface_infos;

  external ffi.Pointer<gchar> name;
}

/// GTypeModuleClass:
/// @parent_class: the parent class
/// @load: loads the module and registers one or more types using
/// g_type_module_register_type().
/// @unload: unloads the module
///
/// In order to implement dynamic loading of types based on #GTypeModule,
/// the @load and @unload functions in #GTypeModuleClass must be implemented.
class _GTypeModuleClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<gboolean Function(ffi.Pointer<GTypeModule>)>> load;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypeModule>)>> unload;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved4;
}

typedef GTypeModule = _GTypeModule;

/// GTypePlugin:
///
/// The GTypePlugin typedef is used as a placeholder
/// for objects that implement the GTypePlugin interface.
/// /
/// /**
/// GTypePluginClass:
/// @use_plugin: Increases the use count of the plugin.
/// @unuse_plugin: Decreases the use count of the plugin.
/// @complete_type_info: Fills in the #GTypeInfo and
/// #GTypeValueTable structs for the type. The structs are initialized
/// with `memset(s, 0, sizeof (s))` before calling this function.
/// @complete_interface_info: Fills in missing parts of the #GInterfaceInfo
/// for the interface. The structs is initialized with
/// `memset(s, 0, sizeof (s))` before calling this function.
///
/// The #GTypePlugin interface is used by the type system in order to handle
/// the lifecycle of dynamically loaded types.
class _GTypePluginClass extends ffi.Struct {
  external GTypeInterface base_iface;

  external GTypePluginUse use_plugin;

  external GTypePluginUnuse unuse_plugin;

  external GTypePluginCompleteTypeInfo complete_type_info;

  external GTypePluginCompleteInterfaceInfo complete_interface_info;
}

typedef GTypeInterface = _GTypeInterface;

/// GTypePluginUse:
/// @plugin: the #GTypePlugin whose use count should be increased
///
/// The type of the @use_plugin function of #GTypePluginClass, which gets called
/// to increase the use count of @plugin.
typedef GTypePluginUse = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>;

/// GTypePluginUnuse:
/// @plugin: the #GTypePlugin whose use count should be decreased
///
/// The type of the @unuse_plugin function of #GTypePluginClass.
typedef GTypePluginUnuse = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>;

/// GTypePluginCompleteTypeInfo:
/// @plugin: the #GTypePlugin
/// @g_type: the #GType whose info is completed
/// @info: the #GTypeInfo struct to fill in
/// @value_table: the #GTypeValueTable to fill in
///
/// The type of the @complete_type_info function of #GTypePluginClass.
typedef GTypePluginCompleteTypeInfo = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<GTypePlugin>, GType,
            ffi.Pointer<GTypeInfo>, ffi.Pointer<GTypeValueTable>)>>;

/// GTypePluginCompleteInterfaceInfo:
/// @plugin: the #GTypePlugin
/// @instance_type: the #GType of an instantiatable type to which the interface
/// is added
/// @interface_type: the #GType of the interface whose info is completed
/// @info: the #GInterfaceInfo to fill in
///
/// The type of the @complete_interface_info function of #GTypePluginClass.
typedef GTypePluginCompleteInterfaceInfo = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<GTypePlugin>, GType, GType,
            ffi.Pointer<GInterfaceInfo>)>>;

/// GValueArray:
/// @n_values: number of values contained in the array
/// @values: array of values
///
/// A #GValueArray contains an array of #GValue elements.
class _GValueArray extends ffi.Struct {
  @guint()
  external int n_values;

  external ffi.Pointer<GValue> values;

  @guint()
  external int n_prealloced;
}

typedef GValueArray = _GValueArray;
typedef GCompareFunc = ffi
    .Pointer<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>;
typedef GCompareDataFunc = ffi.Pointer<
    ffi.NativeFunction<gint Function(gconstpointer, gconstpointer, gpointer)>>;
typedef guchar = ffi.UnsignedChar;
