// coverage:ignore-file
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: sort_constructors_first
// ignore_for_file: unused_element, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// GLib
class LibGLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibGLib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibGLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void g_set_error(
    ffi.Pointer<ffi.Pointer<_GError>> err,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_set_error(
      err,
      domain,
      code,
      format,
    );
  }

  late final _g_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<_GError>>, ffi.UnsignedInt,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('g_set_error');
  late final _g_set_error = _g_set_errorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<_GError>>, int, int,
          ffi.Pointer<ffi.Char>)>();

  void g_set_error_literal(
    ffi.Pointer<ffi.Pointer<_GError>> err,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _g_set_error_literal(
      err,
      domain,
      code,
      message,
    );
  }

  late final _g_set_error_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<_GError>>, ffi.UnsignedInt,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('g_set_error_literal');
  late final _g_set_error_literal = _g_set_error_literalPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<_GError>>, int, int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_user_name() {
    return _g_get_user_name();
  }

  late final _g_get_user_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_name');
  late final _g_get_user_name =
      _g_get_user_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_real_name() {
    return _g_get_real_name();
  }

  late final _g_get_real_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_real_name');
  late final _g_get_real_name =
      _g_get_real_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_home_dir() {
    return _g_get_home_dir();
  }

  late final _g_get_home_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_home_dir');
  late final _g_get_home_dir =
      _g_get_home_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_tmp_dir() {
    return _g_get_tmp_dir();
  }

  late final _g_get_tmp_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_tmp_dir');
  late final _g_get_tmp_dir =
      _g_get_tmp_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_host_name() {
    return _g_get_host_name();
  }

  late final _g_get_host_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_host_name');
  late final _g_get_host_name =
      _g_get_host_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_prgname() {
    return _g_get_prgname();
  }

  late final _g_get_prgnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_prgname');
  late final _g_get_prgname =
      _g_get_prgnamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void g_set_prgname(
    ffi.Pointer<ffi.Char> prgname,
  ) {
    return _g_set_prgname(
      prgname,
    );
  }

  late final _g_set_prgnamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_set_prgname');
  late final _g_set_prgname =
      _g_set_prgnamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_application_name() {
    return _g_get_application_name();
  }

  late final _g_get_application_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_application_name');
  late final _g_get_application_name =
      _g_get_application_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void g_set_application_name(
    ffi.Pointer<ffi.Char> application_name,
  ) {
    return _g_set_application_name(
      application_name,
    );
  }

  late final _g_set_application_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_set_application_name');
  late final _g_set_application_name = _g_set_application_namePtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_os_info(
    ffi.Pointer<ffi.Char> key_name,
  ) {
    return _g_get_os_info(
      key_name,
    );
  }

  late final _g_get_os_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_get_os_info');
  late final _g_get_os_info = _g_get_os_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_user_data_dir() {
    return _g_get_user_data_dir();
  }

  late final _g_get_user_data_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_data_dir');
  late final _g_get_user_data_dir =
      _g_get_user_data_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_config_dir() {
    return _g_get_user_config_dir();
  }

  late final _g_get_user_config_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_config_dir');
  late final _g_get_user_config_dir =
      _g_get_user_config_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_cache_dir() {
    return _g_get_user_cache_dir();
  }

  late final _g_get_user_cache_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_cache_dir');
  late final _g_get_user_cache_dir =
      _g_get_user_cache_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_state_dir() {
    return _g_get_user_state_dir();
  }

  late final _g_get_user_state_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_state_dir');
  late final _g_get_user_state_dir =
      _g_get_user_state_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_system_data_dirs() {
    return _g_get_system_data_dirs();
  }

  late final _g_get_system_data_dirsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_system_data_dirs');
  late final _g_get_system_data_dirs = _g_get_system_data_dirsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_system_config_dirs() {
    return _g_get_system_config_dirs();
  }

  late final _g_get_system_config_dirsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_system_config_dirs');
  late final _g_get_system_config_dirs = _g_get_system_config_dirsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_runtime_dir() {
    return _g_get_user_runtime_dir();
  }

  late final _g_get_user_runtime_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_runtime_dir');
  late final _g_get_user_runtime_dir =
      _g_get_user_runtime_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_special_dir(
    int directory,
  ) {
    return _g_get_user_special_dir(
      directory,
    );
  }

  late final _g_get_user_special_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'g_get_user_special_dir');
  late final _g_get_user_special_dir = _g_get_user_special_dirPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> g_format_size_full(
    int size,
    int flags,
  ) {
    return _g_format_size_full(
      size,
      flags,
    );
  }

  late final _g_format_size_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Int32)>>('g_format_size_full');
  late final _g_format_size_full = _g_format_size_fullPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> g_find_program_in_path(
    ffi.Pointer<ffi.Char> program,
  ) {
    return _g_find_program_in_path(
      program,
    );
  }

  late final _g_find_program_in_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_find_program_in_path');
  late final _g_find_program_in_path = _g_find_program_in_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int g_get_num_processors() {
    return _g_get_num_processors();
  }

  late final _g_get_num_processorsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'g_get_num_processors');
  late final _g_get_num_processors =
      _g_get_num_processorsPtr.asFunction<int Function()>();

  int g_get_charset(
    ffi.Pointer<ffi.Pointer<ffi.Char>> charset,
  ) {
    return _g_get_charset(
      charset,
    );
  }

  late final _g_get_charsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_get_charset');
  late final _g_get_charset = _g_get_charsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> g_get_codeset() {
    return _g_get_codeset();
  }

  late final _g_get_codesetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_codeset');
  late final _g_get_codeset =
      _g_get_codesetPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int g_get_console_charset(
    ffi.Pointer<ffi.Pointer<ffi.Char>> charset,
  ) {
    return _g_get_console_charset(
      charset,
    );
  }

  late final _g_get_console_charsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_get_console_charset');
  late final _g_get_console_charset = _g_get_console_charsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_language_names() {
    return _g_get_language_names();
  }

  late final _g_get_language_namesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_language_names');
  late final _g_get_language_names = _g_get_language_namesPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_language_names_with_category(
    ffi.Pointer<ffi.Char> category_name,
  ) {
    return _g_get_language_names_with_category(
      category_name,
    );
  }

  late final _g_get_language_names_with_categoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>)>>('g_get_language_names_with_category');
  late final _g_get_language_names_with_category =
      _g_get_language_names_with_categoryPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_locale_variants(
    ffi.Pointer<ffi.Char> locale,
  ) {
    return _g_get_locale_variants(
      locale,
    );
  }

  late final _g_get_locale_variantsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>)>>('g_get_locale_variants');
  late final _g_get_locale_variants = _g_get_locale_variantsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>)>();

  int g_get_filename_charsets(
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> filename_charsets,
  ) {
    return _g_get_filename_charsets(
      filename_charsets,
    );
  }

  late final _g_get_filename_charsetsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>(
      'g_get_filename_charsets');
  late final _g_get_filename_charsets = _g_get_filename_charsetsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_environ() {
    return _g_get_environ();
  }

  late final _g_get_environPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_environ');
  late final _g_get_environ = _g_get_environPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Char> g_get_current_dir() {
    return _g_get_current_dir();
  }

  late final _g_get_current_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_current_dir');
  late final _g_get_current_dir =
      _g_get_current_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void g_free(
    ffi.Pointer<ffi.Void> mem,
  ) {
    return _g_free(
      mem,
    );
  }

  late final _g_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'g_free');
  late final _g_free =
      _g_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void g_get_current_time(
    ffi.Pointer<_GTimeVal> result,
  ) {
    return _g_get_current_time(
      result,
    );
  }

  late final _g_get_current_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<_GTimeVal>)>>(
          'g_get_current_time');
  late final _g_get_current_time = _g_get_current_timePtr
      .asFunction<void Function(ffi.Pointer<_GTimeVal>)>();

  int g_get_monotonic_time() {
    return _g_get_monotonic_time();
  }

  late final _g_get_monotonic_timePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('g_get_monotonic_time');
  late final _g_get_monotonic_time =
      _g_get_monotonic_timePtr.asFunction<int Function()>();

  int g_get_real_time() {
    return _g_get_real_time();
  }

  late final _g_get_real_timePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('g_get_real_time');
  late final _g_get_real_time =
      _g_get_real_timePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      g_set_print_handler(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
        func,
  ) {
    return _g_set_print_handler(
      func,
    );
  }

  late final _g_set_print_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>)>>)>>('g_set_print_handler');
  late final _g_set_print_handler = _g_set_print_handlerPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>> Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      g_set_printerr_handler(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
        func,
  ) {
    return _g_set_printerr_handler(
      func,
    );
  }

  late final _g_set_printerr_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>)>>)>>('g_set_printerr_handler');
  late final _g_set_printerr_handler = _g_set_printerr_handlerPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>> Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>)>();

  late final ffi.Pointer<ffi.UnsignedInt> _glib_major_version =
      _lookup<ffi.UnsignedInt>('glib_major_version');

  int get glib_major_version => _glib_major_version.value;

  set glib_major_version(int value) => _glib_major_version.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _glib_minor_version =
      _lookup<ffi.UnsignedInt>('glib_minor_version');

  int get glib_minor_version => _glib_minor_version.value;

  set glib_minor_version(int value) => _glib_minor_version.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _glib_micro_version =
      _lookup<ffi.UnsignedInt>('glib_micro_version');

  int get glib_micro_version => _glib_micro_version.value;

  set glib_micro_version(int value) => _glib_micro_version.value = value;

  ffi.Pointer<ffi.Char> glib_check_version(
    int required_major,
    int required_minor,
    int required_micro,
  ) {
    return _glib_check_version(
      required_major,
      required_minor,
      required_micro,
    );
  }

  late final _glib_check_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('glib_check_version');
  late final _glib_check_version = _glib_check_versionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int, int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LibGLib _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get g_free => _library._g_freePtr;
}

class _GError extends ffi.Struct {
  @ffi.UnsignedInt()
  external int domain;

  @ffi.Int()
  external int code;

  external ffi.Pointer<ffi.Char> message;
}

/// GUserDirectory:
/// @G_USER_DIRECTORY_DESKTOP: the user's Desktop directory
/// @G_USER_DIRECTORY_DOCUMENTS: the user's Documents directory
/// @G_USER_DIRECTORY_DOWNLOAD: the user's Downloads directory
/// @G_USER_DIRECTORY_MUSIC: the user's Music directory
/// @G_USER_DIRECTORY_PICTURES: the user's Pictures directory
/// @G_USER_DIRECTORY_PUBLIC_SHARE: the user's shared directory
/// @G_USER_DIRECTORY_TEMPLATES: the user's Templates directory
/// @G_USER_DIRECTORY_VIDEOS: the user's Movies directory
/// @G_USER_N_DIRECTORIES: the number of enum values
///
/// These are logical ids for special directories which are defined
/// depending on the platform used. You should use g_get_user_special_dir()
/// to retrieve the full path associated to the logical id.
///
/// The #GUserDirectory enumeration can be extended at later date. Not
/// every platform has a directory for every logical id in this
/// enumeration.
///
/// Since: 2.14
abstract class GUserDirectory {
  static const int G_USER_DIRECTORY_DESKTOP = 0;
  static const int G_USER_DIRECTORY_DOCUMENTS = 1;
  static const int G_USER_DIRECTORY_DOWNLOAD = 2;
  static const int G_USER_DIRECTORY_MUSIC = 3;
  static const int G_USER_DIRECTORY_PICTURES = 4;
  static const int G_USER_DIRECTORY_PUBLIC_SHARE = 5;
  static const int G_USER_DIRECTORY_TEMPLATES = 6;
  static const int G_USER_DIRECTORY_VIDEOS = 7;
  static const int G_USER_N_DIRECTORIES = 8;
}

abstract class GFormatSizeFlags {
  static const int G_FORMAT_SIZE_DEFAULT = 0;
  static const int G_FORMAT_SIZE_LONG_FORMAT = 1;
  static const int G_FORMAT_SIZE_IEC_UNITS = 2;
  static const int G_FORMAT_SIZE_BITS = 4;
  static const int G_FORMAT_SIZE_ONLY_VALUE = 8;
  static const int G_FORMAT_SIZE_ONLY_UNIT = 16;
}

class _GTimeVal extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_usec;
}
